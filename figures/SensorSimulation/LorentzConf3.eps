%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: LorentzConf3.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Beniamino Di Girolamo
%%CreationDate: 3/19/10
%%BoundingBox: 0 0 567 415
%%HiResBoundingBox: 0 0 567 414.7739
%%CropBox: 0 0 567 414.7739
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 8966 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD96FF7DA8FD75FFA87DA8FD05FFA8527DFF7DFD14A8FFFD%4FA8FD0EFFA85252A8FD05FFA8527DFD05A8FFFD05A8FFA8A87DA8A8A87D%FF7D7DA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FF7DFD06A8FFFD07A8FF%FD05A8FF7DFD04A8FFA8FFFD05A8FFFD07A8FF7DA8A8A87D7D7DFFA8A87D%A8A8FF7DA8A87DA8FD0EFF7D7D7DFD07FFA8A8FD06FFA8FD06FFA8FD0EFF%A8FD15FFA8FD15FFA8FD0FFFA8FD0BFFA8FD0EFFA852527DFD08FF7DFD15%FFA8FD4DFFA8A8A8FD0DFFA8275252FD07FFA8A8FD0EFF7DFD05FFA8A8FD%40FF7DFD05FFA8FD07FFA8FD0FFFA87D7DFD08FF7DFD0DFFA87DA8FD05FF%A8A8FD10FFA8FD1BFFA8FD11FFA87DA8FFFFFFA8A8FD06FFA8A8A8FD0EFF%7D527DFD08FFA8FD16FFA8FD07FFA87DFFFF7D7D52FFA85252A8FD05FFA8%FD067DA8FF7D7DFFFF7DFFA8527DFF527D7DFFFFA8A8FFA8FFA8FFA87DFD%0CFFA8FD07FFA8FD0EFFA87D52A8FD08FF7DFFA8FD0DFF7DA8FD04FFA8FD%08FF7DF8FF7D7DA8527DFF52FF52FF7D52A8A852A852277D5252A8FF7D52%FF7D27A87D7D52A8FD047DA827FD075227FD04FFA87DA8FD0CFFA8A8A8FD%0EFF7D2752FD08FFA8FD0EFFA8A8A8FD06FFA8FD06FF7D27A8A87D5252FF%FF52FF7DA87D27A8A87D527D7D7D52A852A87D7DA8A827FF7D7D52A87D7D%52A87D7D5252527D27275252FD04FFA8A8FD0EFFA8FD0FFF7DF87DFD08FF%7DFD0FFFA8A8A8FD05FFA8FD07FFA87DA87D7D7DA8FFA8FF52FD05FF7D7D%7DA87DA87DA8A8A87DFFA87DA8FF7DA8A8A87D7DA8FFFD05A87DA8A87DFF%FFFFA87DA8FD04FFA8A8FD08FFA8A8FD0EFFA8FD05FFA8FFFFA8A8A8FD10%FF7DA8FD06FFA8FD07FF527DFD32FFA8FD0FFFA8FD0FFFA8A8FFFFFF7D52%A8A827A8A8FD11FFA8FD05FFA8A8FD08FFA8FD31FFA8FD05FFA8FD0AFFA8%A8FD0EFF52277DFFFFA852A8A87D52A8A8FFA8FD0EFFA8A8FD0FFFA8FFA8%FFA8A8A8FD0BFFA8FD05FFA8FFFFFFA8FD13FFA8A8A8FD04FFA8A8FD07FF%A8FFA8FD0FFF7D277DFFFF7D7D7DA87D7DA8FD11FFA8A8FD06FF7DFD04FF%7D52FFA87D5252A8A8277D52FFA8FFFFFF527D52FF7D27A8FF527DFF7D52%FF7D527D7DFF7D52FD047DA8A8277DFD07FF7DFD10FFA8A8FD0EFF7D527D%FD08FFA8A8FD11FFA8A8FD06FFA8FFFFFF5227A8A8527D7D7DFF52FF7DA8%7D27A8A87DA852FFA87D7DFF527DFF7D7D7DA87D7D52FF52525227525227%52527DFD0CFFA8FD0BFF7DFD0EFFA852277DFD08FFA8FD11FFA87D7DFD06%FFA8A8FFFFA8277D7D7D5252A8FF52FF52FF7D7DA8A852FF52FF7D7D52FF%527DA87D52A87D7D527DFF7D7D7D27A8FD04527DFD05FF7DA8A8FD04FFA8%A8FD0AFFA8A8FD0EFF7D527DFD08FFA8FD1CFFA8FFFFFF527D7DFFA8FFFF%FFA8A8FD05FFA8A8FFFFFFA8FFFFFFA8FD05FFA8A8A8FD09FFA8FD07FFA8%FD11FFA8FD0FFF7D52A8FD08FF7DFD13FFA8A8FD06FFA8A8FFFFFFA8A8FD%2FFFA8FD05FFA8FD0BFFA8A8A8FD0EFF7D527DFD07FFA8A8FD13FFA87DFD%07FFA8A8FD32FF7D7DFD05FFA8A8FD0BFFA8FD0FFFA8527DFD08FF7DFD13%FFA8A8A8FD06FFA8A8FD33FFA8FD05FFA8FD0BFFA8A8A8FD0EFF52527DFD%07FFA8FD15FFA8A8FD08FFA8FD30FFA8A8FD05FFA8FD0DFFA8FD0EFFA87D%52A8FD08FF7DFD15FFA8FD07FFA8A8FD30FF7DA8FD05FFA8A8FD0BFFA8A8%A8FD0DFFA8A8FF7DFD05FFFD04A8FD16FFA8FD07FFA8A8FD2EFFA8FD15FF%A8FD0EFFFD047DFD05FFA85252A8FFA8FD13FF7DA8A8FD06FFA87DFD2EFF%A87DFD05FFA8FD0BFFA8FFFFA8A8FD0EFF7D7DFD06FFA87D52A8A8FD1FFF%A8FD2DFFA8A8FD05FFA8FD0CFFA8FF7DFD0EFFA8A8A8FD06FFA852A8A8FD%17FF7DFD07FFA8A8A8FD2BFF7DA8FD06FFA8FD0EFFA8A8FD0EFF52277DFD%08FFA8A8FD15FFA8A8A8FD07FFA8A8FD2AFFA8A8A8FD15FF7DFD0FFF7D27%7DFD08FFA8FD17FFA87DA8FD07FFA8FD29FFA87DA8FD05FFA8A8A8FD0EFF%A8A8FD0EFF7D527DFD08FFA8FD18FFA8FD09FFA8FD29FFA8FD07FFA8FD0F%FFA8FD0FFFA8277DFD08FF7DFD19FF7DA8FD07FFA8A8FD27FF7DFD07FF52%FD0FFFA8A8A8FD0EFF7D7D7DFD08FFA8FD18FFA8A8FD09FFA8A8FD25FFA8%7DA8FD05FFA852FD10FF7DFD0EFFA85252A8FD08FF7DFFA8FD17FFA8A8A8%FD07FFA8A8A8FD23FFA87DA8FD06FF527DFD0FFFA8A8A8FD0DFFA852FD0A%FFA8FD1AFF7D7DA8FD07FFA8FD25FFA8FD06FFA827FD11FFA8FD0EFF7D52%27A8FD08FF7DA8A8FD19FF7DA8FD08FFA8FD22FFA87DFD07FF52A8FD10FF%A8A8A8FD0EFFA8A8A8FFFFA87DFFA87D7DFD26FFA8A8FD21FFA8A8A8FD05%FFA852FD12FFA8FD14FFA87D7DA852A87DFFA8FD1AFF7D7DFD08FFA8A8FD%1FFFA87DA8FD06FF7D7DFD0FFFFD05A8FD13FF7D52FFA87D52FD1DFF7D52%FD08FFA8A8A8FD1EFF7D27FD07FF52FD13FFA8FD14FF7D7DA8A87DA87DFD%1DFF27A8FD08FF5252FD1DFF7D27FD07FF527DFD12FFA8A8A8FD19FFA8A8%FD1CFF7D27FD09FF277DFD1CFF527DFD06FFA852FD14FF7DFD1AFFA8FD1D%FFA85252FD08FFA827FD1BFF7D52FD07FF527DFD14FFA8A8FD19FFA8A8FD%1DFFA8277DFD08FFA827FD19FFA8277DFD07FF52FD15FF7DFD1AFFA8FD1F%FF7D27A8FD08FF5252FD18FF5227FD07FF277DFD15FFA8A8FD18FFA8A8A8%FD1FFF527DFD08FFA852A8FD16FFA827FD07FFA852FD16FF7DFD1AFF7DFD%20FFA8F8A8FD08FF7D27FD16FF277DFD07FF527DFD16FFA8A8FD19FFA8FD%21FF7D27FD09FF527DFD14FF7D52FD07FFA852FD17FFA8FD18FFA8FF7DFD%21FFA82752FD09FF27A8FD12FFA8277DFD07FF27A8FD16FFA8A8A8FD16FF%A87D7DA8FD22FFA827A8FD08FFA827FD12FF5252FD07FF7D52FD18FFA8FD%17FFA87D7D7DA8A8FD21FF5252FD09FF7D27FD10FF7D27FD08FF52A8FD15%FFFD05A8FD16FF7D52A8FD25FF27A8FD09FF5252FD0EFFA827FD08FF7D52%FD19FFA8FD18FF7DA87DFD24FF7DF8A8FD09FF277DFD0DFF277DFD07FFA8%27FD19FFA8A8A8FD19FFA8FD25FF7D27FD09FFA852FD0CFF7D27FD08FF52%7DFD1AFFA8FD1AFF7DFD26FF5252FD09FF5252FD0AFFA827A8FD07FF7D52%FD1AFFA8A8A8FD19FFA8FD27FF52A8FD09FF277DFD08FFA8527DFD08FF52%7DFD1BFFA8FD1AFFA8FD27FF5252FD09FFA8F8A8FD07FF5252FD08FF7D27%FD1CFFA8A8FD19FFA8A8FD27FF277DFD09FFA827FD06FF7D27FD09FF27FD%1DFF7DFD1AFFA8FD28FFA8F87DFD09FF7D27FD04FFA827A8FD08FF527DFD%1DFFA8A8FD19FFA8FD08FFA8FF7DFD05A87D7DA8A852A8A87D7DA87D5252%FD0CFF7D27FD0AFF527DFFFFFF2752FD08FF7D52FD1EFFA8FD14FFA8A8FF%FF52A8A8FD05FF7DFFA8272727F8F82727F827F8F85252F827F8275252F8%F8A8FD0CFF7D27FD09FFA827A8FF7D52FD09FF52A8FD1DFFA8A8A8FD13FF%A852FFA8527DA8FD08FFFD05A8FF7DA8A8A87DFFFD05A8FF7DFFA8FD0DFF%A82752FD09FF7D527D277DFD08FF7D7DFD1DFFA8FFA8FD14FFA852FFA87D%527DFFA8FD29FFA8277DFD09FF52F87DFD08FFA827FD1DFFFD05A8FD14FF%A8FFA8A8A8FD2DFF7D27A8FD07FFA852F8A8FD08FF27A8FD20FFA8FD1AFF%7DFD2DFF7D27A8FD06FF5227FF277DFD06FF277DFD20FFA8A8A8FD19FFA8%FD2EFF5227A8FD04FF7D27FFFFA8277DFD04FF527DFD22FFA8FD1AFF7DA8%A8FD0FFFA8FFFFFFA8FFFFFFFD05A8FD11FF52277DFF7D52F8A8FFFFFFA8%27527DA82752FD22FFA8A8A8FD19FFA8FD05FFA8FFFF7D7D2752527D7DFD%04527DFD05527D52275252A8FD11FF5227272752FD07FF7D7D527DFD24FF%A8FD1AFF7DFD04FFA852A8FF52FD04275252275227F8527D272727527D7D%277D52FD13FF7DA8A8FD07FFA8FFA8FFFFFFA8FFFFA8A8FD1EFFA8A8FD18%FFA8A8A8FD19FFA8FD1EFF527D7D275252FFA827A85227A8FD1EFFA8FD1A%FF7DFD38FF7DF87D7D527D7DFF52F87D52277DFD1EFFA8A8FD19FFA8A8FD%37FF5252527D7D7D277D5252527D27A8FD1EFFA8FD18FFA8A8A8FD11FFA8%FD15FFA8FD0FFFA8FFFFFFA8FFA8A8A8FFFFFF7DFD0FFFA8FD0BFFA8FD04%FFA8A8FD17FF7D52A87DA87DA8A8A87DFFFD06A87DFD05A87DA87DFD05A8%7DFD07A87DFD04A8FF7DA87DA8A8A87DFFA8A87DA8A8A87DFF7DFD04A8FF%7DFD06A8FF7DA8A8A87DA87DA87DFD04A8FF7DFD05A87DFFFD04A87DA87D%FD18FF7D7DFFA8A8FFA87D7DFFA87DA8FFA8FFA8FF7D7DA8FF7DA8A8FFA8%FFA8A852FFA8A87DFFA8FFA8FF7D7DA8A852A8A8FFA8FFA8FFA87DA8FFA8%FFA8FFA8FF7D7DA8A852A8A8FFA8FFA8A87DFFA8A87DFFA8FFA8FF7D7DA8%A87DA8A8FFA8FFA8A852FFA87D7DFFA8FD1AFF7DFD04FFA8527DFF7D27A8%FD05FF7D52A8A8527DFD05FF7D7DA8FF52A8FD05FF7D52A8A87D52FD06FF%7D7D7DFD06FFA87D7DFFA87D7DFD05FF7D7DA8FF52A8FD05FF7D7DFF7D52%7DFD05FF7D7DA8A8277DFD20FFA8527D7DA852527DFFFFFFA87D527D7D7D%527DFFFFFFA8527D7D7DA8277DFFFFFFA852527D7DA852A8FD06FF52A852%FD06FFA87D7DA8A852FD05FFA87D7DA87D277DFD04FFA8527D7D7D527DFD%04FFA87D7DA87D5252FD22FF7DA8A8A87DA8FD05FFA87DA87D7DA8FD05FF%7D7DA8FF7DA8FD05FFA87DFF7D52A8FD06FFA852FD08FF7D7DA8527DA8FD%05FF7D7DA8FF7DA8FD05FFA87DA8A87DA8FD05FF7D7DA8A87DA8FD51FFA8%FD0FFFA8FD1FFFA8FD4EFF7D52A8FFA8FFFFA87DFFFFA87DFFFFFF7DA8A8%7DA8FFFFA8FFA8FD04FFA87DFFA8FFFFA87DA8FFFFFF7DFFA8FFFF7D7DFF%A8FD4EFF52A8527D277D7D5252FF7D5252527D7D527D5252527D52527D7D%277DFF7D277D52527D52275252FF7D52527D277D527DFF7DFD4DFFA87D7D%7D525252A85252FFA8277D277D7D527D52275252A8277D52527DFF527D27%7D277D52522752FF7D527D5252527D7DFF52FD4EFFA8FFFD04A87DFFA8FF%FD04A87DA8A8A87DFD04A8FF7DFF7DFFA8FFFFA8A8A82752A8A8A8FFA87D%FD04A87DA87DA8FD70FFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDA8FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-03-19T15:43:54+01:00</xap:CreateDate>
         <xap:ModifyDate>2010-03-19T15:43:55+01:00</xap:ModifyDate>
         <xap:MetadataDate>2010-03-19T15:43:55+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>188</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUBqmu6RpT&#xA;2SajdJbvqNylnYo1ay3ElSsagA7mhxVH4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq8N8weY7e5/My6hvdesJZLG6t7a30qG+1q3ngpISAYLIJDJLL&#xA;yFQwbcUrx2Cr3LFWJ+bvICeYdZ0nVl1O4srjSp4JUiVY5ImSKZZnUK6ko8hRQWB/ZFQaYqp+WtDs&#xA;NR060vZ7vVXuJrW3kmDX2pxRmVl5O6fvUQ8i3RdttsVTKXypAtpFHFdX7zI0IeVtQvQWVXX1Cf31&#xA;PiQHFVYeVrATM5ub8oyqoj/SF7QEFiW/vu9R92KpZdeRTLqFvNHqN6sMbcpC19fmQKJC5SOk4Wki&#xA;kI3IHYbb7hVMH8sW31yJlnvvq4jkEi/pC+3csnA/33gGxVB2nlOOM3tvc6pevNcySS2fHUL3nFDx&#xA;VRxUzdEY+/XriqPfytYM0ZW5v1CNyZRqF78Q4kcT++8TX6MVWQeWLYS3JlnvijSAwD9IX2yemgI/&#xA;vv5w2KuTynZhLdTeagzRU9Rjf3tZKIV+L99tueW2Krx5WsBMzm5vyjKqiP8ASF7QEFiW/vu9R92K&#xA;qMPlSAwFZbq/WT1mYMNQvT+7ExZV/vu8dFxVWPlawMyuLm/CKrKY/wBIXtCSVIb++7UP34qo3HlS&#xA;AWNwkN1ftcsspgc6heijNyKD++/ZqBiqsfK1gZlcXN+EVWUx/pC9oSSpDf33ah+/FVj+U7MpcKLz&#xA;UFaWvpsL+9rHVAvw/vt9xy3xV0/li2MtsYp74IshM4/SF9unpuAP77+criq8eVrATM5ub8oyqoj/&#xA;AEhe0BBYlv77vUfdiqweU7MW8cX1zUDInDlN9fvatwILVHrU+OlD88Vcnli2+uSs0999XMcYjX9I&#xA;X2zhn5n++8CuKu/wnZ+lw+uahy9Tnz+v3tePqc+H9904/D8sVXnytYGZXFzfhFVlMf6QvaEkqQ39&#xA;92ofvxVDjynFJYzwteX8NxIZxFOt/eMUDO3pMAZqEqpXY4qhtJ8lzQTSyX+qX1wjEiKFb6+CgbfG&#xA;SZq8mpXiPhWtBiqIbydCdRjuBqGoC3UsXtzf3u9UChQfW6VBY170pTeqrcPlG2e0tFubvUBNGqm4&#xA;4alfDm3plWBKzjbka7eGKteXoobfW9Rt7Wa8e0FtaSLFey3UrLI0lyHZTdszgMqL022xVkOKuxV2&#xA;Kvnzz3pWhRfmaIpdJ07Tf0pcW815c3Uenxzu8dyxWWyu5mi9OWcKGkFHdumxxV9B4q7FUg8lSwv5&#xA;f05UvvrLLZ2/OHlEfS/djaiKrDw+I4qn+KuxVLPMWmQ6jpjwzTehFGfVdioeMhASRIh2de9D3APb&#xA;FVbR7qC4sUEXr/uKQuLpXWeqqKGTmAxLKQ1ffFVDVrK59eK+sIw18vGI1IC+nyrUhv5akEjcKzUB&#xA;agxVNFZWUMpBUioI3BBxVLvMeu2egeX9S1y9DGz0u1mvLhYwC5SBDIwUEgFiFoN8VY3Z/mbY33k2&#xA;x8w2dusk2o36aTb2nrI8Zu2vDZPxuIhIjxKytIJFHxIKjc0xV3l3z9quu3uqabBpMVtqVlbJcRI9&#xA;360cbSu6LbX7RRH6tcqE5tCvqUU9cVQnk38yNX1YaG+r6bb2cHmGW9t7CS1uHmKz2PMlJVeKKgdL&#xA;eVgwJ6AU3xVk+necvLepX11Y2d4JLqyV3ukMcqBFjbi55OqqaE9jirAtU/PX9F6TZ61e6Gy6ZfWn&#xA;122RbpGvZopIZLmOSG1VG5xJCqevIzr6bMRRuNSqjJvzc1K11QaVf6JDY3VtctbavcS3dw9lbVjt&#xA;JYm+swWUyj1Ev13mESAqRy74qnlz58kg89x+WpLJILNvTjGqXD3EYkuJYnlWC3pbPbO/FB8L3CMd&#xA;6KabqqMP5qaHJ/igm01CJPK0UtzdSTWN5AkkUFslw/F54Yow/wC8oqFuTAc1qhriqHj/ADMvxoWt&#xA;3M+iEa1or2aPpVvNJcrJ+kEieApLHb+oT+/o6rCxBU8eWxKqt5b/ADMtdSN+t7DDA9jYfpM/VJZZ&#xA;1aJJZ4J0Ings5Ulhktiro8akEgdjiqVN+f3kyOEzT2epQJ+79PnbpV2miiuIkRVkY8mguEk37Gh+&#xA;L4cVRf8Ayu7yh+kJ9LEF9+loZFgj030V+sTTtIImiROezI539QqpA5KWXfFWSeR/M/8Aijypp2v/&#xA;AFb6n9fjMn1YtzKUdkpyKp/L4Yqpea57C5EOjTzSQy3TRtzVecYq4SNZlqpZJJCFop+dBviqeWtv&#xA;9Xt0h9WSbgKerKeTn/WNBXFVGzspYLi7ledpVuHDojfsgClOtPbYDYD9qrFVF4qkWjyQyeYdRaK8&#xA;+vL9UswZaxtQ+rdfD+6VV98VT3FXYq7FXlPnLyH5V8xfmbaapfeYILHU9IS1MdgEH1ghmdk+K5kl&#xA;gIkIIHpwBh/NirOPOHnPTvKtgL29t7i4jpI7i3EfwRQrzkkd5nhjAUUoOXJiaKrHFVDU/P2j2Gt6&#xA;Ro3pST3mtIJbYB7aDjGzKoZku5reRz8VeESO9AfhxVGeT1ux5b0szSRvGbK29NUQoQPSX7RLvy+4&#xA;YqnOKuxVzKrKVYAqRQg7gg4qxqyeTRNTktZha2GjTSBLJKqlWYbFSCWZi2z8woFVCk91WRyRrJG0&#xA;bEhXBUlWKtQimzKQQfcYqlmhpPatPphhZbWzCCC4ZQokLgs9AoCABuioKKNtsVR2oWFnqNhc6ffQ&#xA;rcWV5E9vdQPuskUqlHRvZlJGKvP4/wAu9Rh1W90u2jEPlpprPUtJvWupLie1v7SX6w7GGdZDIbid&#xA;maVzLVuTVNTirJ/KXkfQ/KkMsGkG6W3kJPoT3U88almLMyJKzKGZmqzdTiqy18i6LZ3eiPZBoLPQ&#xA;WvJbKyqzr697UNKXcs3wrJKAP8v2xVG6d5R8sabeXN7YaXbW11eBlupo41VpFduTBqdQW3IxVjWm&#xA;/k15StFX1mu7hvqa6XKPrM8UcunxBo4baWKN1RkSFgh2o1ORFTiqMH5U+S6q0kFzMzMHumlvbuQ3&#xA;VChUXZaU/WFT0k4iSoAHH7O2Ko2LyD5bj1eDVWS5nurdxNGtxd3M8XrrGYVuGilkdGmWM8Q5FQPk&#xA;MVasPy98r2NzqdxFHdzNrKPFqkd3f313DOsiqjcobieWLl6aKgYLUL8IIXbFVGD8tPK0Fi9nEt4i&#xA;SkPJKL679ZnQxejI0vq+ozwC2jWIk/ABQbM1VXaR+XOgabdalKitLFqNqLFopGdmELySz3BaZmaV&#xA;5Lie5d5HLVO3hiqHuPyh/L+4WNZtNLrE8MkY9e4FGt7aG0j6SDpDbRr9FepOKqc35O+Q5NRn1EWl&#xA;xDeTSSTLNDeXUZilmnFy8kHGQCFjMC1Up9ph9k0xVk2g6FpegaPa6PpUJg0+zT07eIu8hValt3kL&#xA;Odz3OKoPTtOvJNYn1K4uYryzaraeRRynLase37qiVVuLNz6nj0xVMtQmtkg9GeZoPrR+rxyISH5y&#xA;AgcWANG8DirenWn1OxgteQb0UCVA4rt/KtW4qP2VrsNsVRGKpNp63K+ZNRFxIkj/AFOyo0aGMU9W&#xA;62oXk/Xiqc4q7FXYq+evzMkhvfzg09zaTpNbzWdrDNPDJCfUaVjGbdGIt7sSNG3EysvRh8SimKva&#xA;PN3lKDzLZx2s17c2ca81lEHpMkscq8XSSKdJom7MrFeSsKg9aqpfe/lzZ3iW1tNql62mQC3jfTiY&#xA;DHJDZzCe3jLmL1gEdRVlfkw+0xxVFeUNMtm0DS5ZtPtUYWlu8cyAPIx9NTyasacT36nFWR4q7FXY&#xA;qlHma3gNg13JHNK9sDSOFnXkrkBlkCFS0VQGceA79CqjtMu3vNPguniaF5UDNG44kH5Heh6iu9Ou&#xA;KobWYHUwajGGeSx5ssArxb1BwJbiGb4evwgmlRQ4qh/N9xrq+TdZn0CM/p5dPuX0yKis31oQsYlp&#xA;8SFvUoKdK+2KvM9K84eZ7jyVDpmqLd2d/Z61YWmq3k7vHOul3upEW7GVltpuT2wjjd5IkejcmVWr&#xA;RVMPyyg80alNeWuvNqbWs+mQprwvJLuHjrDTzeulm7lGSL0Sv+859PjwpuTVVC+QrXWNGl8lRyPf&#xA;pf6rcaxFrVpfTXMpNrCJXilaK4ZuBR4rdVZQNn/ysVZh5d17z7d63qdtq2iLZ6dbpKbCf4VMzrIF&#xA;jXkJpR8S7/ZGKsc8nX/mFpfJGq3F/qF5p935fvrrXoipmhS/DWsr8hHH6nq+pLNGkZJoE4oo+Kqr&#xA;fl/UPMI8/avNW/urW4S9kY3VvqkUWnxxemLQLbyS/Vbr1wCyrBEko3qalgFUu03XPzBv/IfmQ3Fx&#xA;ey6hFfqYfT0bU9Ku10+XUW9d7c3byNKTZcmiSIc4tlbkxGKtXV7r83lGOye91WyhXWJprW9e21a4&#xA;nOju1z9SW4e1eC9PqPGq/wB76gXgX+1uqv0XzH57TyT5tnsLS4TVLH6i2n2krS6jNb3U9jayXdr+&#xA;9aSWT0XkLHluCxr02VQS+YvzoXzBZ6UJLuWyudRubaXUjpsf7u2tb2a3SSojSL99CiyFm26EUXqq&#xA;kUv5g/nHqGkala3lvf2EcsDut5b6VcfWUnltpvSs40WKqK08YQuOZjO3q1IOKvevLf1v/Dul/XfU&#xA;+ufU4PrPrcvV9X0l58+XxcuXWu9cVWa/qem2lstvfq7RX3KBljPE8Cp9RuXJCOKVPwnl/KCcVVNB&#xA;063sdNSOBuaykzM/H0wzSb1EfRP9UfrrirVwq3WqJaXFp6lvAi3MVwa0WUMVC7bHbfr9GKpjiqnc&#xA;WttcoEuIUmQHkFkUOAelaGvjiqTaPb+h5h1FPq0NpW0sz6duaof3t18R+CPf6MVT3FXYq7FXin5n&#xA;21gv5iWk5it7udxZq2mreTx3UxM6jkkCWM68uA4/70L8NacSalV7XirsVSDyUnHy/px9GeOtnb/H&#xA;NL6iN+7H2F9STiP9iMVT/FXYq7FXYqx7QtZ1RtRubDVl/fCQrC8cTrEG4l/SEhHFvgHJTXkd6gfD&#xA;VVkOKpVp8E9hfy2oUtYyBpzcv19aSTisddq/D17k7kktirpvKflqbV5NZm0y2k1SaL6vLdvGrO8V&#xA;KcGJG4ptviqa4qsMMJmWYopmRWRJCByCuQWUHqAxRaj2GKr8VWRQwwqUiRY1LM5VAFBZ2Lu1B3Zm&#xA;JJ7nFV+KuxV2KrIoIIQwhjWMOzSMEAUF3NWY07sdycVX4q7FXYqkhfVLvzAEUW1xosH2zVHKToK0&#xA;bcssqvxK7UC1qeXHFU6d0jRndgiICzMxoABuSScVQum/pD0H+vU9X1X4Up9jl8PTan8vfjTl8VcV&#xA;ReKuxVItHTh5h1EelND/AKJZ/DcSeq/97dbhvUl29q4qnuKuxV2KvEtRt/Lx8x3UskgHnP8AThkt&#xA;/LnO7Ek1otwY1ZFWZdpoqXPrAenH9kjirDFXtuKsT83eepvLuqWFu+netY3UtrBNetMIqSXtx9Xj&#xA;SJeDq7J9uT1HjAXoWPw4qifKF/p8egaWj6mksjWluogeSEFG9NRxUKFb23rirI8VdirsVdiqSa8r&#xA;2dxFqVlpq3V+VeNrgIzMFVGZFonxfGw4Bv2eR+RVTmNnaNWdeDkAslQeJI3FR4YqhNWskuYEkKvJ&#xA;JaOLmGKNgpeSMHilWBG+Kqmm3MtzZQzTJ6czKDLHQqQxFfst8S1G/FviHffFUTirsVdirsVdirsV&#xA;dirsVdirsVQ2p3y2NlJdMvPhxCpyCAs7BVqzUCirbk9MVS7ytp2mW9ibqwR0S8o5V3EnEKSAqspK&#xA;soJNGqeXiRTFUVq8ljIsem3Lsj31ViZKVUpQh/iBXZyooQQSRUEVxVHRxpHGsaCiIAqipOwFBucV&#xA;XYqp3F1bWyB7iZIUJ4hpGCAnrSpp4Yqk2jyQyeYdRaK8+vL9UswZaxtQ+rdfD+6VV98VT3FXYq7F&#xA;XjfnLzv580P8x7LRYNShk069ljkS1e1Vbl45JN4rUUb1+CChbmu/Wg+LFXsmKpJrHkvy9q+pw6lf&#xA;27SXMKpGwWWVI5o4pPWiS4iRlSZY5fjVXBANfE4qu8nrdjy3pZmkjeM2Vt6aohQgekv2iXfl9wxV&#xA;OcVdirsVdiqndRPNbTQpIYnkRkWVeqFhQMKEdOvXFWP+U7u6jnu9IntzH9VZmV1MjRoOQAT97yZQ&#xA;32o/iaoqfg2XFWSYqk62k+n6q9ykiiwuS0l5JKygIaAKAT8RJdvhr+zVeyDFU4xV2KuxV2KuxV2K&#xA;uxV2KuxV2KsT1Rh5g1j9FhZ7dbCUepJX4SCORcoASteJSNpPgcF9jtirLFVVUKoAUCgA2AAxVAQ3&#xA;UN1qlxbyWw56cUaKdgDvKhqU2qvwkjbFUfirsVdiqTaetyvmTURcSJI/1Oyo0aGMU9W62oXk/Xiq&#xA;c4q7FXYq8V1973zZ+Y7JpdvdsdIeGK6gimiisrhbO9fm11FK0f11E2osbfumNGJbbFXtWKuxVIPJ&#xA;Vt6Xl/Tn+qQQepZ259WE1eT92DV/gTf6Tiqf4q7FXYq7FXYqxzzRFFbXtjrE9zMkVs6xrBE1Czs1&#xA;VCA0T959h+Zpx6EHFU70/UbHULf6xZTLPDyKFl7MpoVIO4I8DirWpafBqFm9pOWEUlOXA0PwkMPH&#xA;wxVCaNfXLmSzvv8Ae6Esz0px4lqhQR/KrLTvxK1+KtFU0xV2KuxV2KuxV2KuxV2KpX5m1Z9L0iW5&#xA;jU+q37uJ/hCIzA0d2f4QB/ldTQd8Va8sW+pQ6TH+kLh55pD6i+oG5ojgEI5cBia1JqNq8e2KqHnf&#xA;zVp/lXyxfa3fFvTt4yIo495JJm+GKJOvxO5CjFV3kvTdY03yrpllrVz9b1aOEG9m2CiVyXaNOO3C&#xA;MtwT/JAxVOsVdirsVSLR7f0PMOop9WhtK2lmfTtzVD+9uviPwR7/AEYqnuKuxV2KsNj/ACw0+DWz&#xA;q9rrOq20vrXE620U8YgX65cfWriMKYifTkm+IryxVX/MDzPqeg2Vq+ntbLPcyOkaTxTXUs0ioWjt&#xA;7e1t2jkkklb9rlRACxBGKoHzH508xaXqOk+pax2OlmG2m1+Vo1vWtnup1gjh+C6tXUF+S+qkUu+/&#xA;GgOKpt5QeSHQNL4WV0wktLcNI8yPHT01+JVeY8R8l+jFWR4q7FXYq7FXYqsngguIWhnjWaFxR45F&#xA;DKw8CDscVYho+q6NpPnefyha2VxHczWqXy3MhJRoErGFirt6UHwx9ahmG2/LFWZYqlur27pw1CFu&#xA;D23xzhRRpEjDFULDsOTD4qgBiacqEKouxvYLy2S4hIIbZlqCUcfaRqdGU7MOxxVXxV2KuxV2KuxV&#xA;2KuJAFTsB1OKsJ0fXtE82+abh9Lv5C2gusVwiK5Qk1NEk+FFL1pKvxVAUfCytirNsVYDqcknmn8y&#xA;LPR4ik2geVPT1LViKENqjchZW7HxhWs5A6Nwr2xVn2KuxV2KqdxNJEgZIHnJNOEZQEDx/eMg/HFU&#xA;m0dOHmHUR6U0P+iWfw3Enqv/AHt1uG9SXb2riqe4q7FXYq7FUt1ry15f1wQjWNOt7/6sWa39eNXM&#xA;ZYUYqT0qOuKqI8neUxc210NGshc2bGS1mEEfONya8lbjUGor88VUPJUsL+X9OVL76yy2dvzh5RH0&#xA;v3Y2oiqw8PiOKp/irsVdirsVdirsVYH+bnl7Xr7S7PXfLkhTzB5dka709UWrS8gFlhJALFJIwVZO&#xA;h2JBKgYqn3kfzfp/mzy5aaxZni0y0ubZqCSGZGKSRyIGYoQ6nY74qn2KvMrpm/Lnzqb15CnkbzVc&#xA;k38krLxsdZuG+GboGWG5ChWrsr/ExFTir03FXYq7FXYq7FXYqwX82vNtnpGgjR4wLjXderaaVZ7k&#xA;BiKtcTBfi9CADm/8wHGhriqfeS/Kdh5U8u2mjWh9UwgvdXbCklxcSEvNPJufikkYtSu3QbDFXedv&#xA;M8Pljyvf6y6etLbx0tLUbtPcyHhBCgqCzSSMq0G+KoT8uvLM2heW0+ugHW9UkbU9dkGwa+ugHmCg&#xA;bBI9o0A6KoxVk+KuxV2KuxVItHkhk8w6i0V59eX6pZgy1jah9W6+H90qr74qnuKuxV2KuxV2KuxV&#xA;JvJ63Y8t6WZpI3jNlbemqIUIHpL9ol35fcMVTnFXYq7FXYq7FXYq7FXkmpCH8tPzFTU4LUp5R81t&#xA;HDqM55MlnqJJUSKVrxW4ovPn1fdTu1FXrSOkiK6MHRwGVlNQQdwQRiqB13QtL17SbnSdVgFzYXaG&#xA;OeJu4PgR0OKsO/LrVL7Rb6b8vNdmaW/0qP1NE1KXb9Iaf2Za1/e23IRyKD/K3fFXoGKuxV2KuxVR&#xA;vb6ysLSW8vZ47W0t1Mk9xMwSNEHVmZiABirzD8tNIn81eYLv8yde097Wa7onlu1lrxisuICzcH+L&#xA;1JgisW2BHGgBGKvVcVedXno+dPzMhsqOdE8jut1cSKQY59XkUNDGaVFLWI8j/ltTbiaqvRcVdirs&#xA;VdirsVSbT1uV8yaiLiRJH+p2VGjQxinq3W1C8n68VTnFXYq7FXYq7FXnnnzzbqWn+btM0fTdYitb&#xA;y4SCaPT5RbpCyNc8J5Lya4+PgYwVhS3/AHhetar0VZB5QguYdA0t4bG1jWW0tzJMkhWRh6ankwEO&#xA;53rTl9OKsjxV2KuxV2KuxV2KuxVK/NHlvSvMmhXejanCs9pdxshDg/CxBAYcSjAivZhirC/yl168&#xA;tZtQ8ha7eG713QCTa3BBK3GnArHHIshCl2jf4JdhRunw0xV6RirEfzI8n3ev6XBeaRMbTzRorm70&#xA;G8BA4TgANG/LZo5VHB1OxHXFUT5A86webNFa6aA2Wq2crWmsaY5rJa3cW0kbd6d1PcYqyXFXYq7F&#xA;XkfnOSb8xPO0fkiwlA8v6JIlx5olIK+q6ttZpWofYgv8NBUA1DYq9Ws7O2s7ZLa2QRwRiiIKmlTX&#xA;virHfzF84N5X8vPcWka3Wt3rraaJYE7zXUpouw34RiskngoOKoryN5WXyv5Ys9H9drueLnLeXrij&#xA;z3EzmWaZ92qzyOSd/wAMVT7FXYq7FXYqp3DXKoDbxpI9d1kcxinjUJJ+rFUm0e39DzDqKfVobStp&#xA;Zn07c1Q/vbr4j8Ee/wBGKp7irsVdirsVdiqm9vbyOsjxI8ifYdlBIpvsTiqSeSk4+X9OPozx1s7f&#xA;45pfURv3Y+wvqScR/sRiqf4q7FXYq7FXYq7FXYq7FXn/AOaP5eXWuRQ+YPLhW2846QfW06aoQThR&#xA;8dtI/wCz6i/CGrsaHtUKp7+X/m2380+WbXUlkU3VDHfW4BV4J0JV4pUO6uhFG7VrTbFWR4q8789a&#xA;fc+VtcX8xdFt3n4olt5rsIxy9bTkqxukUbme2pUfzJVfDFWdaXqmnarp9vqOnXCXVldRrLBPGaqy&#xA;OoZT9IOKorFWDfmb58TRdPbRdKb1vNOqRyw6dCpKrDSIvLdSyU4qltF+9YV5HYD7QOKpj+XXkjTv&#xA;KPl2OxtpTd3E5+sXuovEIpbiWT4mkkG7VJJNGJpWgoKAKsoJAFTsB1OKvN/J9fOvnW687zo40bRj&#xA;LpvlIbiKZWqt3fiv2/V/u42Hw8PEk0VekYq7FXYq7FXYq7FUi0dOHmHUR6U0P+iWfw3Enqv/AHt1&#xA;uG9SXb2riqe4q7FXYq7FXYq7FUg8lSwv5f05UvvrLLZ2/OHlEfS/djaiKrDw+I4qnrSxK6IzqryE&#xA;iNSQCxAqaDvQYqketef/ACRoguRq2vWNpLZhjcW8lxH66lIxMUEIJlZ/TdWCKpYgig3GKqZ/Mf8A&#xA;L0M6t5n0lXjBaVGvrdWQKwVualwV4sQDXodsVQ8X5q/lxLcR26eY7EyyrM8Y9ZQCsE4t2bkdqNMw&#xA;WPf95+xyxVTtfzc/LW5vvqKeYbSO7+r2t2IZ2NuWivo1ltuPrBOTyI6kIPi3FRvirdr+bP5e3lq9&#xA;zYawl+kYteUdlFPdTcr0OYIhDCkkplYQuWiC81AqwGKojyh+ZPknzjLdxeW9UTUZLEI12qRypwEh&#xA;ZUr6iJ19M9Pn0IxVkuKuxV4/5hTUPyx84zeZ9OszL5O1mn+IbSBV/cPEn7u7QfDw9MVVwPhMe53Q&#xA;tir1u1uYLq2iuYGDwzIskbjurCoOKqjokiMjqHRwVZWFQQdiCDiry2yij/K/zbFp6qI/IfmOUi0l&#xA;b1GGn6iQSLdmqwEVwf7skV5fDWnHFWfeafMmn+W/Lt7rt+T9TsY/VkK7kgkKOle5GKsH/K3yvqGp&#xA;T3XnvzbD6ut6wqpp9tcRitlYqxeONVJKhnJDNQddgStMVem4q8//ADH1O91nULX8vdDuGh1HVk9X&#xA;XLiMLW10c1juHDmvGWUkRxClanl+zirNtK0uw0nTLXTNPiEFlZxrDbwr0VEFAMVRWKuxV2KuxV2K&#xA;uxVItHkhk8w6i0V59eX6pZgy1jah9W6+H90qr74qnuKuxV2KuxVi/wCYuiahq+gW8OnLK97b6lpt&#xA;1GkUzQgxw30LTlwHRZFWAO3F6ioqByC4qx/ztoWt6r5t0vU7PR5Zp9PeOOwlu006exQi7VriaUSm&#xA;S5i/coGieAq/ICo2oVWWeUk1AeX9IZ5omt/qdv8Au1iYPT0Vp8ZkI/4XFUzudPt7i5t7iUEvbEmM&#xA;A7fEQd/pQHFWMa9+UX5fa/e3t7q2mPc3OokfXm+t3cayhREFV0jmRCo+rRELSnJQ3XfFUDa/kR+V&#xA;Vm0jWeifVZJLqO+MkF3eROtzDz9OWN0mVo2T1W48CKfQKKoeX/nHn8n5LQWbaCwtApQW63t8sdGd&#xA;ZG+BZwtS0ab9fhA6AYqjNR/I/wDKzURaC90JZxYGM2oae5ovowQ20fSUcqQ2sS/FX7PiTVVX078n&#xA;vy902wexsNPmtoHeGRTHfXyyxNbNK8RgmE/qwcWuZT+6Za82rWuKpj5V/LzyZ5Tlnl8u6Ymnvcxp&#xA;DOY3kbmkckkqAh2YVDzvv1pQdAoCrIsVdiqG1PTbTU9PuLC8QSW1zG0UimnRhSorWhFdjiryXytf&#xA;6l+WfmmHybrc81x5a1Fj/hrUZHrFENv9EPIVQw7n7dOG/VSWVex4qlXmvTdA1Py7f2PmBUbRp4iL&#xA;z1W4qFBDBuWxVlYAqRuDSmKvAfIF9qPnrzla6Jr/AJhlutL0KZrvQriQMBq72rgJMvIqhktlbkeP&#xA;OpPP7IXFX0niqQed/OmleUdCm1W/rIy/DaWce8txMxCpFGADVmZgMVS38t/Ler2Frfa55kSI+ade&#xA;m+s6g0dT6MQUCCzRjX93br8Ip1NWO5OKsxxV2KuxV2KuxV2KqdwtyyAW8iRvXdpEMgp4UDx/rxVK&#xA;tPW5XzJqIuJEkf6nZUaNDGKerdbULyfrxVOcVdirsVdirsVdiqQeSrb0vL+nP9Ugg9Sztz6sJq8n&#xA;7sGr/Am/0nFU0udW062u4bSedY7iegjQ1/aPFeRAovJvhXkRyOwqcVYx5t/N7yJ5Vlv7bVr2QX2n&#xA;RJNPZQ288khWVS0fFgnpUcjjyLhQxUMy1GKoC1/Pz8qLqRo7bWmmdJDA/p2l5Iom4u4i5pCyGRxC&#xA;/BQavT4a4qg1/wCcjPyr9NZ5L+4jsilxI961pOYUW2nSD4iiM3KQyqyqAWCmrhKiqrpf+cify0tL&#xA;i0i1O4udMivdLt9Yhurm3b0fRunCxxcovVLS/FU8AVAr8VQQFUTpn55+UdWij/RNrqF9czpZmC0S&#xA;GON5Jb71uEKSTyxQF4xbSGQ+pwFOPItVcVUPLH5/eT/MmoaXZada3YbV55re0eaXTo6G34eoXjN3&#xA;6yn96pVOHqMPiVSu+KvS8VdirsVSPzr5S0/zZ5cutEvmaOOcBop0rzimQ8o5VoV+JGAYb9cVebad&#xA;5681fl5c3PlvzVp17r1tAjy6Xrdghm9SFBWtxCB6kWxHMpzVWrx22CrV2PPv5qPZWdxp1x5c8klv&#xA;W1CSSkV3doSwEcVSziJo/wBsopPKnECjYqzfzN+WXl7V/LtjpFmh0mTRqSaBd2YVJLOZFojxkhtq&#xA;/bH7XfrirH4POv5neX6WGv8AlaXWhAy21vq+ltCsd0eSIkki3EyNA78vs0ZWY0DimKo3ynoHmXzB&#xA;rcPm3zxaJbT2ahvLuio3KOyMiFZZnqFLXDj+YfADxXuSq9CxV2KuxV2KuxV2KuxV2KpFo9v6HmHU&#xA;U+rQ2lbSzPp25qh/e3XxH4I9/oxVPcVdirsVdirsVdiqQeSk4+X9OPozx1s7f45pfURv3Y+wvqSc&#xA;R/sRiqaXWnabNc295cwo09saW8r9VLkDb6aU98VQWpeS/J2qXElzqehadfXMxRpp7m0gmdzEpSMs&#xA;zoxPBWIWvQE4qpDyF5FCToPLmlhLljJcr9St6SOVdSzjh8R4yuKnsx8TiqHk/Lb8tZCscvlbRnPA&#xA;oqNYWp/dhuRUAx/Z5tX54qibjyL5IuUjS58vaZMkMKWsSyWdu4SCJg0cSgoaIjCqqNgcVWjyB5EF&#xA;vc2w8t6WLe8EQu4fqVvwlFv/AHIkXhR/T/Yr9ntiqPsdE0GyMYsLC1tjaeqkIgijjMX1grJMq8AO&#xA;PqMFZ6fa2JxVH4q7FVsU0cqlo25KGZCf8pGKsPoYHFV2KqF5HZGH1buNHitj64aRQ3BoxUOKg0K9&#xA;iN8VV8VeNfmX5h/MqT8wdDj8v6dqSeVdD1GxTWrq2RlW6e7lQSKUB9SaCGB9yileRPL7IxVjmqW/&#xA;mvSLq91SXUfNP1OXzfFptvapLqN0V0i2CT3MyQoJGZZWhdUZV+yaCoxVOfMHnH8xNT/MXy7rGiaT&#xA;rMXkaxvIrO4UQPCbtrqB2mkntJPSuPTj5xqjyJ6asrHkDTFXfkRcecr3zRq17rFzqV5ZvaAvdXZv&#xA;IITdSzljDJZXa8IriCMcD9VcxBdtya4q9tE0ZmaEN+8RVdl8FckKfp4HFV2KuxVbFNHKpaNuShmQ&#xA;n/KRirD6GBxVdirsVWwzRzQpNE3KORQ6N4qwqDviqSaOnDzDqI9KaH/RLP4biT1X/vbrcN6ku3tX&#xA;FU9xV2KuxV2KuxVi/wCYGh3+q2WkGwWWS4stZ0u7dI5miX0Ib2J7hpFDokgWJWbiwPsK4quXy02l&#xA;WzT/AOJr+0sbSBVcyDTxFFb24Yjk72uyopNWZunU4qxOy80Jfaxa6TZard3Xl438Ok2mtQzWEge9&#xA;jsRqkfGNbMhofSUD1PU3btTfFVbyf5qm8xea9V0yPUr6CS0WVUmD2UhdLO7ktW9RDZIqFnqy8HkH&#xA;EjkVPw4qyXVLG00nTzPqvmu40+xEyubi6fT4Y/VaX1FHOS3Ubv0FfbFWI6X53N2b3VL+/wBRs7Kz&#xA;0u71exuEaxmeXT7eYxzNJF9Tj9KT9yrKgZtj9oGoxVMvI99fea7DVDcahf2EwlWO5t62rNxmto2U&#xA;8ZrC1mjJRh1j4n7SMwNcVRXnTWLLy3Zie98y3L6nGpm03SuenR3FzIf3ICI1vyK1k+JuJCjftiqX&#xA;R+ZZ7Py3rOs3uo38Oo2F5LZXOnQtYzCa9iVVSO3lezh5LInA8mReIqWACk4qyHQNNudS0HRtQTWd&#xA;QhSS2guYIiLJiglg2Vm+qjlRZKYqx/zT5o/RGqtYaTrc2sa+IpHvtPFxp8Rt7e0he5LTcbOdkd1a&#xA;kasg516gAnFVDWPMNzYQaO9teahcaZqxtbuJ3ksIbmV724DrHaW4tJGuJY+XqSpyUKn7R6Yqzg6B&#xA;fGdJjrt/zRWRfgsaUcqTt9W/yBirHfNa6npVvY6XZahe6hfa9czWltaySWVvGS0E13MzzfUpioEc&#xA;T0op3oPcKo/y2svmHRNK8xW2t6ikWoWaXEMbpY1VLlUkKsPq1KjiBiqKv9EltrC/nude1BbZo3lu&#xA;iEsiQixBWK0tq/YTtirEdG8y61rFhd3MkmoR6lp1pZ6tZ2McunyCSDU4pVtzJK1nEsbLwkEoowSl&#xA;QX2xVOvJs995i0+XVRq95FJ6r2jSQNZXFrKLd2Hq2s5s4vViJcjnwXcEdsVX+aYbjy/5aN0dX1C4&#xA;W3ktILW3H1JC88txFBbI0n1VuIMroGahoMVSO582vYeVtT8yXmoagup2U0+mS6ZC1jJ6t3ZPLSOG&#xA;VrOPkjDlJzKCiVJUUIxVlOl6PdX+j2lyNa1COO6WO9EdLIlWkYXFOX1UVoxxVIvO+ran5eubX6vf&#xA;32oXrWd/etEz2Vuq2disT3LK31KUNJV41jUgAk7soqcVSvVvNyWmr2egWuoalc2uox2k95dsLaJY&#xA;Y9ZuHiho4sZIg5fkaSyR9ghZyFxVnx0C+M6THXb/AJorIvwWNKOVJ2+rf5AxVh975ivdP83SaSl9&#xA;fyWRu7Ozv78vYh0u7+ImBY4PqZDx8Y05t6i0LbK1DiqG0PzBJqfnKTyjFqmoW66ULn6rdK9izsbH&#xA;0reQSRvYhKN9a+DhI5+E8gmKs+0rRGsbu5vJr+51C5uY4oWluRAvGOBpGRVFvFAvWZqkgnFUzxV2&#xA;KuxV2KuxV2KuIDAqwqDsQehGKpDc+RvLs+py6mYporuZTVobieFVkMH1X140jdUjnEH7oSqA4Xau&#xA;Kr9H8m+XtH1CS/sLdo7h1lSPlLLIkMc8gmmjgR2ZIkklUOyoACQPAYqnTxpIpV1DqaVVhUbGo2OK&#xA;sdh/L3ynCLtUtZPTveSzwtcXDR+lIXZ4FQvxWBmmdmiX4Ce2y0VR+geWdI0GGaPT45A1y4kuJ55Z&#xA;biZyiCNA0szO5CIoVRWgGKojVtI03VrGax1CAT206NHIpJVuLdeLqVdDtUMpBB3GKpWPIXlU6fJp&#xA;9xZfXLSYOZoruSS4DySMzPM3qs1ZjzP737YGwIAAxVNtL0yx0rTbXTbCEQWVnEkFtCvRY0HFRvud&#xA;h1OKoLXvKeha6sY1GBi0bErLBLLbykOhidGkhaN2R42KspND8wMVQUv5feXH1q31lfrcN9bR+jC0&#xA;N5cxosPqep6KosgVY67cFAFAB0AxVkmKpL5t0e11PSgJbS4vZrWQT2kdncG0uBLxaItFOJIOB9OR&#xA;1PxiqkjvirHvLH5meTh5d0p5o/8AD9ncWS3Gk2NwULGwjjXg6iAyhVH2ArHlyoAKkVVRGufmz5D0&#xA;/RZ7+S9W8jW1muBaRoTJIsIlDxESBFSQm2lUJIVJKMKfCcVSfVtH/KzTPK5jmF02hapOdMmmiurt&#xA;lMcMciiNnMgZreBIXCKvJV34jc4qmuhedfy70vS4Ley1l5bZpfRh+tSXEsgbjCVBacco4uNxDxZq&#xA;J8a0PxCqqD1T8yfy61mystI1KVng1q2W4lUEhbcfV0vYw08Lf3wDRlBCzNyK06qSqomb8mZbP9CX&#xA;V1Dc2t5ETJFevPKivLJcB55XmqsNy8vrK8jlZOS8SfhACqf6N518gxW9hpemahDHEvp2VpagSKYu&#xA;PGOGOQMoMXPkix+pTnUca1xVLPO+peQ7zzJa+XfMUc4uIrG4v/rcbyRRLbsr+rbyvC6s4nit5WMR&#xA;BVljNdwMVQFxq/5NyyQ6tcakzcJVqrS3vBjbSreW/rQdGigku0eDmvBeaBNioxVk3l38w/LGuiyS&#xA;1ufSu79C8NnMKSAgM3BipaP1OEbOE5cuA5UpiqQ6lrP5W3HmS6u9RuWttTtWlhLmW4jjlayQxtOs&#xA;cTcC8DzPCkhUPz2XcJiqjZa3+VWk6zpt3pjy3eo6tcGC0jV7iZYZb+4aOeVknbhA8k0D+rsJGKts&#xA;fixVnOma3a6hdajaRq8dzpdx9VuopKA1aJJkdaE1R45VIPzHUHFUwxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVgzflHoX6GtdLS9vY0s9Kj0WKZXj5GCGaOdWcenRizQgOKcWUlSN8&#xA;VS6H8itAt9JvtJt9X1KGw1OOePUIY2tkE3rNcMpbhAvERm8eirRTRaigoVU7v/yw0O88r23lp7i6&#xA;j0yznlns1Ro+USSLKiQISh/dRJOVQHcAAVxVCx/lLpEOqzalaanqFrPciKK79F4h6sEMFrAISTEW&#xA;UMLBCzIQ27CoBFFUqb8gPKrafZ6Y2oX7aZYiN4LMm3KfWYoIoPrBJhLlj9WjcoTw5V+GhpiqJP5F&#xA;+UH0u50yaa6e0vFt1uo1MMQf6vNdTmgjjUIJH1CTkFpQU40xVXb8nNDuNXstX1LULzUtQtWt+c1y&#xA;LZvUSzk9W2josKiIRvv+64lqnlWuKonzB+U3lrXLzUNQupJ01S/mSQahGY/WhiW2Fq1tEWRgInj5&#xA;8gQTV23xVj3mb8lrq6v5H0PUWtoNTSO21iSd15i3hjs4VEaehIslV09SRyjNSfjpsFU48vfkv5U0&#xA;LXLTWLSSeS4tD6irMIW5TCA2wlLiNZBSFuPFWC9DSuKtN+UenzyayZ764iXUnuRAbdlUpFeXceoS&#xA;Bw6tyJulcEH4WjPEjFVHS/yR0TS2g+o6tqEMcV0l9JEBacZJ4bia5hYj6vRQjXLjilARTbbFWU+X&#xA;fLs2m3+sahdXH1m81WeJ2kA40it4Et4gwAVebcGduKgVag2AxVPMVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:0BE6EA7E0035DF11A69FF981E2E87738</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0CE6EA7E0035DF11A69FF981E2E87738</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.008</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-BoldOblique</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Bold Oblique</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -414.774 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 414.774 li
567 414.774 li
567 0 li
cp
clp
[1 0 0 1 0 0 ]ct
216.75 414.274 mo
104.25 414.274 li
104.25 398.774 li
216.75 398.774 li
216.75 414.274 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
216.75 414.274 mo
104.25 414.274 li
104.25 398.774 li
216.75 398.774 li
216.75 414.274 li
cp
@
90.75 324.524 mo
90.75 20.7739 li
538.5 20.7739 li
538.5 324.524 li
90.75 324.524 li
cp
ef
0.75 lw
10 ml
506.5 19.8989 mo
504.083 23.5239 li
506.5 27.1489 li
508.917 23.5239 li
506.5 19.8989 li
cp
501.75 37.1489 mo
499.333 40.7739 li
501.75 44.3989 li
504.167 40.7739 li
501.75 37.1489 li
cp
496.75 53.8989 mo
494.333 57.5239 li
496.75 61.1489 li
499.167 57.5239 li
496.75 53.8989 li
cp
491.75 67.3989 mo
489.333 71.0239 li
491.75 74.6489 li
494.167 71.0239 li
491.75 67.3989 li
cp
487 79.1489 mo
484.583 82.7739 li
487 86.3989 li
489.417 82.7739 li
487 79.1489 li
cp
482 94.1489 mo
479.583 97.7739 li
482 101.399 li
484.417 97.7739 li
482 94.1489 li
cp
477 105.149 mo
474.583 108.774 li
477 112.399 li
479.417 108.774 li
477 105.149 li
cp
472.25 118.649 mo
469.833 122.274 li
472.25 125.899 li
474.667 122.274 li
472.25 118.649 li
cp
467.25 133.649 mo
464.833 137.274 li
467.25 140.899 li
469.667 137.274 li
467.25 133.649 li
cp
462.25 142.899 mo
459.833 146.524 li
462.25 150.149 li
464.667 146.524 li
462.25 142.899 li
cp
457.25 154.399 mo
454.833 158.024 li
457.25 161.649 li
459.667 158.024 li
457.25 154.399 li
cp
452.5 164.899 mo
450.083 168.524 li
452.5 172.149 li
454.917 168.524 li
452.5 164.899 li
cp
447.5 174.399 mo
445.083 178.024 li
447.5 181.649 li
449.917 178.024 li
447.5 174.399 li
cp
442.5 185.149 mo
440.083 188.774 li
442.5 192.399 li
444.917 188.774 li
442.5 185.149 li
cp
437.75 194.399 mo
435.333 198.024 li
437.75 201.649 li
440.167 198.024 li
437.75 194.399 li
cp
432.75 204.149 mo
430.333 207.774 li
432.75 211.399 li
435.167 207.774 li
432.75 204.149 li
cp
427.75 213.649 mo
425.333 217.274 li
427.75 220.899 li
430.167 217.274 li
427.75 213.649 li
cp
423 221.899 mo
420.583 225.524 li
423 229.149 li
425.417 225.524 li
423 221.899 li
cp
418 229.399 mo
415.583 233.024 li
418 236.649 li
420.417 233.024 li
418 229.399 li
cp
413 238.149 mo
410.583 241.774 li
413 245.399 li
415.417 241.774 li
413 238.149 li
cp
408.25 245.899 mo
405.833 249.524 li
408.25 253.149 li
410.667 249.524 li
408.25 245.899 li
cp
403.25 252.649 mo
400.833 256.274 li
403.25 259.899 li
405.667 256.274 li
403.25 252.649 li
cp
398.25 260.899 mo
395.833 264.524 li
398.25 268.149 li
400.667 264.524 li
398.25 260.899 li
cp
393.5 270.399 mo
391.083 274.024 li
393.5 277.649 li
395.917 274.024 li
393.5 270.399 li
cp
388.5 274.899 mo
386.083 278.524 li
388.5 282.149 li
390.917 278.524 li
388.5 274.899 li
cp
383.5 279.899 mo
381.083 283.524 li
383.5 287.149 li
385.917 283.524 li
383.5 279.899 li
cp
378.75 288.649 mo
376.333 292.274 li
378.75 295.899 li
381.167 292.274 li
378.75 288.649 li
cp
373.75 291.399 mo
371.333 295.024 li
373.75 298.649 li
376.167 295.024 li
373.75 291.399 li
cp
368.75 292.899 mo
366.333 296.524 li
368.75 300.149 li
371.167 296.524 li
368.75 292.899 li
cp
363.75 290.399 mo
361.333 294.024 li
363.75 297.649 li
366.167 294.024 li
363.75 290.399 li
cp
359 290.649 mo
356.583 294.274 li
359 297.899 li
361.417 294.274 li
359 290.649 li
cp
354 285.649 mo
351.583 289.274 li
354 292.899 li
356.417 289.274 li
354 285.649 li
cp
349 281.649 mo
346.583 285.274 li
349 288.899 li
351.417 285.274 li
349 281.649 li
cp
344.25 274.649 mo
341.833 278.274 li
344.25 281.899 li
346.667 278.274 li
344.25 274.649 li
cp
339.25 268.899 mo
336.833 272.524 li
339.25 276.149 li
341.667 272.524 li
339.25 268.899 li
cp
334.25 261.649 mo
331.833 265.274 li
334.25 268.899 li
336.667 265.274 li
334.25 261.649 li
cp
329.5 255.149 mo
327.083 258.774 li
329.5 262.399 li
331.917 258.774 li
329.5 255.149 li
cp
324.5 247.649 mo
322.083 251.274 li
324.5 254.899 li
326.917 251.274 li
324.5 247.649 li
cp
319.5 244.399 mo
317.083 248.024 li
319.5 251.649 li
321.917 248.024 li
319.5 244.399 li
cp
314.75 237.649 mo
312.333 241.274 li
314.75 244.899 li
317.167 241.274 li
314.75 237.649 li
cp
309.75 229.399 mo
307.333 233.024 li
309.75 236.649 li
312.167 233.024 li
309.75 229.399 li
cp
304.75 223.149 mo
302.333 226.774 li
304.75 230.399 li
307.167 226.774 li
304.75 223.149 li
cp
300 217.899 mo
297.583 221.524 li
300 225.149 li
302.417 221.524 li
300 217.899 li
cp
295 211.399 mo
292.583 215.024 li
295 218.649 li
297.417 215.024 li
295 211.399 li
cp
290 203.649 mo
287.583 207.274 li
290 210.899 li
292.417 207.274 li
290 203.649 li
cp
285 195.649 mo
282.583 199.274 li
285 202.899 li
287.417 199.274 li
285 195.649 li
cp
280.25 190.649 mo
277.833 194.274 li
280.25 197.899 li
282.667 194.274 li
280.25 190.649 li
cp
275.25 183.149 mo
272.833 186.774 li
275.25 190.399 li
277.667 186.774 li
275.25 183.149 li
cp
270.25 176.399 mo
267.833 180.024 li
270.25 183.649 li
272.667 180.024 li
270.25 176.399 li
cp
265.5 169.149 mo
263.083 172.774 li
265.5 176.399 li
267.917 172.774 li
265.5 169.149 li
cp
260.5 161.649 mo
258.083 165.274 li
260.5 168.899 li
262.917 165.274 li
260.5 161.649 li
cp
255.5 153.899 mo
253.083 157.524 li
255.5 161.149 li
257.917 157.524 li
255.5 153.899 li
cp
250.75 147.149 mo
248.333 150.774 li
250.75 154.399 li
253.167 150.774 li
250.75 147.149 li
cp
245.75 140.399 mo
243.333 144.024 li
245.75 147.649 li
248.167 144.024 li
245.75 140.399 li
cp
240.75 129.399 mo
238.333 133.024 li
240.75 136.649 li
243.167 133.024 li
240.75 129.399 li
cp
236 123.649 mo
233.583 127.274 li
236 130.899 li
238.417 127.274 li
236 123.649 li
cp
231 114.399 mo
228.583 118.024 li
231 121.649 li
233.417 118.024 li
231 114.399 li
cp
226 105.649 mo
223.583 109.274 li
226 112.899 li
228.417 109.274 li
226 105.649 li
cp
221.25 95.8989 mo
218.833 99.5239 li
221.25 103.149 li
223.667 99.5239 li
221.25 95.8989 li
cp
216.25 88.3989 mo
213.833 92.0239 li
216.25 95.6489 li
218.667 92.0239 li
216.25 88.3989 li
cp
211.25 79.3989 mo
208.833 83.0239 li
211.25 86.6489 li
213.667 83.0239 li
211.25 79.3989 li
cp
206.25 71.3989 mo
203.833 75.0239 li
206.25 78.6489 li
208.667 75.0239 li
206.25 71.3989 li
cp
201.5 61.1489 mo
199.083 64.7739 li
201.5 68.3989 li
203.917 64.7739 li
201.5 61.1489 li
cp
196.5 52.8989 mo
194.083 56.5239 li
196.5 60.1489 li
198.917 56.5239 li
196.5 52.8989 li
cp
191.5 41.3989 mo
189.083 45.0239 li
191.5 48.6489 li
193.917 45.0239 li
191.5 41.3989 li
cp
186.75 33.6489 mo
184.333 37.2739 li
186.75 40.8989 li
189.167 37.2739 li
186.75 33.6489 li
cp
181.75 21.1489 mo
179.333 24.7739 li
181.75 28.3989 li
184.167 24.7739 li
181.75 21.1489 li
cp
90.75 324.524 mo
90.75 20.7739 li
538.5 20.7739 li
538.5 324.524 li
90.75 324.524 li
cp
0 0 0 1 cmyk
@
2.25 lw
461.75 150.274 mo
463.75 146.274 li
365.25 296.024 mo
367.25 296.274 li
369.25 296.024 li
371.25 295.524 li
373.25 294.524 li
375.25 293.524 li
377.25 292.024 li
379 290.274 li
381 288.274 li
383 286.274 li
385 283.774 li
387 281.274 li
389 278.774 li
391 275.774 li
393 273.024 li
394.75 270.024 li
396.75 267.024 li
398.75 264.024 li
400.75 261.024 li
402.75 257.774 li
404.75 254.774 li
406.75 251.524 li
408.75 248.274 li
410.5 245.024 li
412.5 241.774 li
414.5 238.524 li
416.5 235.274 li
418.5 232.024 li
420.5 228.524 li
422.5 225.274 li
424.5 221.774 li
426.25 218.274 li
428.25 214.774 li
430.25 211.274 li
432.25 207.774 li
434.25 204.274 li
436.25 200.524 li
438.25 197.024 li
440.25 193.274 li
442 189.524 li
444 185.774 li
446 182.024 li
448 178.274 li
450 174.524 li
452 170.524 li
454 166.524 li
456 162.524 li
457.75 158.524 li
459.75 154.524 li
461.75 150.274 li
268.75 177.024 mo
270.75 180.024 li
272.75 182.774 li
274.75 185.524 li
276.75 188.274 li
278.75 191.024 li
280.75 194.024 li
282.75 196.774 li
284.5 199.524 li
286.5 202.024 li
288.5 204.774 li
290.5 207.524 li
292.5 210.274 li
294.5 213.024 li
296.5 215.774 li
298.5 218.524 li
300.25 221.024 li
302.25 223.774 li
304.25 226.524 li
306.25 229.024 li
308.25 231.774 li
310.25 234.524 li
312.25 237.024 li
314.25 239.774 li
316 242.274 li
318 245.024 li
320 247.524 li
322 250.274 li
324 252.774 li
326 255.524 li
328 258.024 li
330 260.774 li
331.75 263.274 li
333.75 266.024 li
335.75 268.524 li
337.75 271.024 li
339.75 273.524 li
341.75 276.024 li
343.75 278.524 li
345.75 280.774 li
347.5 283.274 li
349.5 285.274 li
351.5 287.524 li
353.5 289.274 li
355.5 291.024 li
357.5 292.524 li
359.5 293.774 li
361.5 294.774 li
363.25 295.524 li
365.25 296.024 li
@
0.75 lw
90.75 324.524 mo
538.5 324.524 li
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 46 /period putdup 65 /A putdup 73 /I putdup 84 /T putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 107 /k putdup 108 /l putdup 110 /n putdup 114 /r putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings18 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/k <1C60D8A8C9B7A73D847F857A1BFD24ACB75840E5C7CBB8AB7BE870135525EBD6DBF4EAE3173F6ABCE16E75318AB6C78B406BDB> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EXWBJQ+Helvetica /Helvetica findfont ct_VMDictPut/EXWBJQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 18{/.notdef}rp /A 7{/.notdef}rp /I 10{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n 3{/.notdef}rp /r 141{/.notdef}rp]EXWBJQ+Helvetica nfEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf315.234 360.766 mo(Track Incidence Angle \(rad.\))[10.9463 5.96777 9.96582 8.95996 8.96094 4.97852 4.97852 9.9668 8.95996 3.98145 9.96582 9.9668 9.96582 8.95996 9.9668 4.97852 11.9531 9.96582 9.9668 3.98145 9.96582 4.97852 5.96777 5.96777 9.96582 9.9668 4.97852 0 ]xsh538.5 320.024 mo
538.5 324.524 li
526.25 320.024 mo
526.25 324.524 li
514 315.274 mo
514 324.524 li
95.75 320.024 mo
95.75 324.524 li
108 320.024 mo
108 324.524 li
120.25 315.274 mo
120.25 324.524 li
514 315.274 mo
514 324.524 li
501.75 320.024 mo
501.75 324.524 li
489.25 320.024 mo
489.25 324.524 li
477 320.024 mo
477 324.524 li
464.75 315.274 mo
464.75 324.524 li
452.5 320.024 mo
452.5 324.524 li
440.25 320.024 mo
440.25 324.524 li
427.75 320.024 mo
427.75 324.524 li
415.5 315.274 mo
415.5 324.524 li
403.25 320.024 mo
403.25 324.524 li
391 320.024 mo
391 324.524 li
378.75 320.024 mo
378.75 324.524 li
366.25 315.274 mo
366.25 324.524 li
354 320.024 mo
354 324.524 li
341.75 320.024 mo
341.75 324.524 li
329.5 320.024 mo
329.5 324.524 li
317 315.274 mo
317 324.524 li
304.75 320.024 mo
304.75 324.524 li
292.5 320.024 mo
292.5 324.524 li
280.25 320.024 mo
280.25 324.524 li
268 315.274 mo
268 324.524 li
255.5 320.024 mo
255.5 324.524 li
243.25 320.024 mo
243.25 324.524 li
231 320.024 mo
231 324.524 li
218.75 315.274 mo
218.75 324.524 li
206.25 320.024 mo
206.25 324.524 li
194 320.024 mo
194 324.524 li
181.75 320.024 mo
181.75 324.524 li
169.5 315.274 mo
169.5 324.524 li
157.25 320.024 mo
157.25 324.524 li
144.75 320.024 mo
144.75 324.524 li
132.5 320.024 mo
132.5 324.524 li
120.25 315.274 mo
120.25 324.524 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginEXWBJQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendEXWBJQ+Helvetica /Encoding getdup 45 /hyphen putdup 48 /zero putdup 50 /two putdup 52 /four putdup 54 /six putdup 56 /eight putpop%ADOEndSubsetFont
/EXWBJQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A 7{/.notdef}rp /I 10{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /l /.notdef /n 3{/.notdef}rp /r 141{/.notdef}rp]EXWBJQ+Helvetica nfEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf104.242 341.274 mo(-0.8)[5.96777 9.96631 4.97852 0 ]xsh153.992 341.274 mo(-0.6)[5.96777 9.96631 4.97852 0 ]xsh202.742 341.274 mo(-0.4)[5.96777 9.96631 4.97852 0 ]xsh251.742 341.274 mo(-0.2)[5.96777 9.96631 4.97852 0 ]xsh311.992 341.274 mo(0)sh353.484 341.274 mo(0.2)[9.9668 4.97852 0 ]xsh403.242 341.274 mo(0.4)[9.9668 4.97852 0 ]xsh451.984 341.274 mo(0.6)[9.9668 4.97852 0 ]xsh500.984 341.274 mo(0.8)[9.9668 4.97852 0 ]xsh90.75 324.524 mo
90.75 20.7739 li
538.5 25.2739 mo
538.5 20.7739 li
526.25 25.2739 mo
526.25 20.7739 li
514 29.7739 mo
514 20.7739 li
95.75 25.2739 mo
95.75 20.7739 li
108 25.2739 mo
108 20.7739 li
120.25 29.7739 mo
120.25 20.7739 li
514 29.7739 mo
514 20.7739 li
501.75 25.2739 mo
501.75 20.7739 li
489.25 25.2739 mo
489.25 20.7739 li
477 25.2739 mo
477 20.7739 li
464.75 29.7739 mo
464.75 20.7739 li
452.5 25.2739 mo
452.5 20.7739 li
440.25 25.2739 mo
440.25 20.7739 li
427.75 25.2739 mo
427.75 20.7739 li
415.5 29.7739 mo
415.5 20.7739 li
403.25 25.2739 mo
403.25 20.7739 li
391 25.2739 mo
391 20.7739 li
378.75 25.2739 mo
378.75 20.7739 li
366.25 29.7739 mo
366.25 20.7739 li
354 25.2739 mo
354 20.7739 li
341.75 25.2739 mo
341.75 20.7739 li
329.5 25.2739 mo
329.5 20.7739 li
317 29.7739 mo
317 20.7739 li
304.75 25.2739 mo
304.75 20.7739 li
292.5 25.2739 mo
292.5 20.7739 li
280.25 25.2739 mo
280.25 20.7739 li
268 29.7739 mo
268 20.7739 li
255.5 25.2739 mo
255.5 20.7739 li
243.25 25.2739 mo
243.25 20.7739 li
231 25.2739 mo
231 20.7739 li
218.75 29.7739 mo
218.75 20.7739 li
206.25 25.2739 mo
206.25 20.7739 li
194 25.2739 mo
194 20.7739 li
181.75 25.2739 mo
181.75 20.7739 li
169.5 29.7739 mo
169.5 20.7739 li
157.25 25.2739 mo
157.25 20.7739 li
144.75 25.2739 mo
144.75 20.7739 li
132.5 25.2739 mo
132.5 20.7739 li
120.25 29.7739 mo
120.25 20.7739 li
90.75 20.7739 mo
538.5 20.7739 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginEXWBJQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/P <1C60D8A8C9B64EDFE336D280AD0769103D1650D4946BC89E21A88DEC51613F3C79BEE823BD11DE4DA6DB5B89497F0D2976B3DEFC67AF28487C3BB530BC49F1D09A090BACE6D7137C10758B70768799060F36DCE81F308AA18889AF5053DE> |-/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F183A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02CBA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-/w <1C60D8A8C9B6079F005DC3C75B1A77147C8375CCDFD0A24C766DB69E35DE36706983CA4785D8107CB89C2D97982F5548429FD5F71FC913D3> |-/x <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F0469> |-systemdict /gcheck known {setglobal} if end {end} ifendEXWBJQ+Helvetica /Encoding getdup 67 /C putdup 80 /P putdup 104 /h putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdup 120 /x putpop%ADOEndSubsetFont
/EXWBJQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 6{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n 3{/.notdef}rp /r /s /t /u /.notdef /w /x 135{/.notdef}rp]EXWBJQ+Helvetica nfEXWBJQ+Helvetica*1 [0 -17.9202 -17.9202 0 0 0 ]msf51.2422 167.016 mo(Pixel Cluster width)[-11.9526 -3.98145 -8.95996 -9.96631 -3.98145 -4.97852 -12.9414 -3.98145 -9.96631 -8.95996 -4.979 -9.96631 -5.96729 -4.979 -12.9414 -3.98096 -9.96631 -4.979 0 ]ysh104.25 20.7739 mo
90.75 20.7739 li
97.5 31.0239 mo
90.75 31.0239 li
97.5 41.0239 mo
90.75 41.0239 li
97.5 51.2739 mo
90.75 51.2739 li
97.5 61.2739 mo
90.75 61.2739 li
104.25 71.5239 mo
90.75 71.5239 li
97.5 81.5239 mo
90.75 81.5239 li
97.5 91.5239 mo
90.75 91.5239 li
97.5 101.774 mo
90.75 101.774 li
97.5 111.774 mo
90.75 111.774 li
104.25 122.024 mo
90.75 122.024 li
97.5 132.024 mo
90.75 132.024 li
97.5 142.274 mo
90.75 142.274 li
97.5 152.274 mo
90.75 152.274 li
97.5 162.524 mo
90.75 162.524 li
104.25 172.524 mo
90.75 172.524 li
97.5 182.774 mo
90.75 182.774 li
97.5 192.774 mo
90.75 192.774 li
97.5 203.024 mo
90.75 203.024 li
97.5 213.024 mo
90.75 213.024 li
104.25 223.274 mo
90.75 223.274 li
97.5 233.274 mo
90.75 233.274 li
97.5 243.524 mo
90.75 243.524 li
97.5 253.524 mo
90.75 253.524 li
97.5 263.774 mo
90.75 263.774 li
104.25 273.774 mo
90.75 273.774 li
97.5 284.024 mo
90.75 284.024 li
97.5 294.024 mo
90.75 294.024 li
97.5 304.274 mo
90.75 304.274 li
97.5 314.274 mo
90.75 314.274 li
104.25 324.524 mo
90.75 324.524 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginEXWBJQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendEXWBJQ+Helvetica /Encoding getdup 49 /one putdup 51 /three putdup 53 /five putpop%ADOEndSubsetFont
/EXWBJQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 6{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n 3{/.notdef}rp /r /s /t /u /.notdef /w /x 135{/.notdef}rp]EXWBJQ+Helvetica nfEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf79.7344 331.524 mo(1)sh62.7422 280.024 mo(1.5)[9.96631 4.979 0 ]xsh77.4922 230.524 mo(2)sh62.7422 179.024 mo(2.5)[9.96631 4.979 0 ]xsh77.4922 127.774 mo(3)sh62.7422 77.2583 mo(3.5)[9.96631 4.979 0 ]xsh77.4922 27.5239 mo(4)sh478.375 24.9824 mo
480.792 24.9824 li
480.792 27.3989 li
483.208 27.3989 li
483.208 24.9824 li
485.625 24.9824 li
485.625 22.5654 li
483.208 22.5654 li
483.208 20.1489 li
480.792 20.1489 li
480.792 22.5654 li
478.375 22.5654 li
478.375 24.9824 li
cp
473.375 41.2324 mo
475.792 41.2324 li
475.792 43.6489 li
478.208 43.6489 li
478.208 41.2324 li
480.625 41.2324 li
480.625 38.8154 li
478.208 38.8154 li
478.208 36.3989 li
475.792 36.3989 li
475.792 38.8154 li
473.375 38.8154 li
473.375 41.2324 li
cp
468.625 52.2324 mo
471.042 52.2324 li
471.042 54.6489 li
473.458 54.6489 li
473.458 52.2324 li
475.875 52.2324 li
475.875 49.8154 li
473.458 49.8154 li
473.458 47.3989 li
471.042 47.3989 li
471.042 49.8154 li
468.625 49.8154 li
468.625 52.2324 li
cp
463.625 61.7324 mo
466.042 61.7324 li
466.042 64.1489 li
468.458 64.1489 li
468.458 61.7324 li
470.875 61.7324 li
470.875 59.3154 li
468.458 59.3154 li
468.458 56.8989 li
466.042 56.8989 li
466.042 59.3154 li
463.625 59.3154 li
463.625 61.7324 li
cp
458.625 75.2324 mo
461.042 75.2324 li
461.042 77.6489 li
463.458 77.6489 li
463.458 75.2324 li
465.875 75.2324 li
465.875 72.8154 li
463.458 72.8154 li
463.458 70.3989 li
461.042 70.3989 li
461.042 72.8154 li
458.625 72.8154 li
458.625 75.2324 li
cp
453.625 86.9824 mo
456.042 86.9824 li
456.042 89.3989 li
458.458 89.3989 li
458.458 86.9824 li
460.875 86.9824 li
460.875 84.5654 li
458.458 84.5654 li
458.458 82.1489 li
456.042 82.1489 li
456.042 84.5654 li
453.625 84.5654 li
453.625 86.9824 li
cp
448.875 98.9824 mo
451.292 98.9824 li
451.292 101.399 li
453.708 101.399 li
453.708 98.9824 li
456.125 98.9824 li
456.125 96.5654 li
453.708 96.5654 li
453.708 94.1489 li
451.292 94.1489 li
451.292 96.5654 li
448.875 96.5654 li
448.875 98.9824 li
cp
443.875 109.982 mo
446.292 109.982 li
446.292 112.399 li
448.708 112.399 li
448.708 109.982 li
451.125 109.982 li
451.125 107.565 li
448.708 107.565 li
448.708 105.149 li
446.292 105.149 li
446.292 107.565 li
443.875 107.565 li
443.875 109.982 li
cp
438.875 121.982 mo
441.292 121.982 li
441.292 124.399 li
443.708 124.399 li
443.708 121.982 li
446.125 121.982 li
446.125 119.565 li
443.708 119.565 li
443.708 117.149 li
441.292 117.149 li
441.292 119.565 li
438.875 119.565 li
438.875 121.982 li
cp
434.125 130.482 mo
436.542 130.482 li
436.542 132.899 li
438.958 132.899 li
438.958 130.482 li
441.375 130.482 li
441.375 128.065 li
438.958 128.065 li
438.958 125.649 li
436.542 125.649 li
436.542 128.065 li
434.125 128.065 li
434.125 130.482 li
cp
429.125 139.232 mo
431.542 139.232 li
431.542 141.649 li
433.958 141.649 li
433.958 139.232 li
436.375 139.232 li
436.375 136.815 li
433.958 136.815 li
433.958 134.399 li
431.542 134.399 li
431.542 136.815 li
429.125 136.815 li
429.125 139.232 li
cp
424.125 149.732 mo
426.542 149.732 li
426.542 152.149 li
428.958 152.149 li
428.958 149.732 li
431.375 149.732 li
431.375 147.315 li
428.958 147.315 li
428.958 144.899 li
426.542 144.899 li
426.542 147.315 li
424.125 147.315 li
424.125 149.732 li
cp
419.375 156.982 mo
421.792 156.982 li
421.792 159.399 li
424.208 159.399 li
424.208 156.982 li
426.625 156.982 li
426.625 154.565 li
424.208 154.565 li
424.208 152.149 li
421.792 152.149 li
421.792 154.565 li
419.375 154.565 li
419.375 156.982 li
cp
414.375 165.732 mo
416.792 165.732 li
416.792 168.149 li
419.208 168.149 li
419.208 165.732 li
421.625 165.732 li
421.625 163.315 li
419.208 163.315 li
419.208 160.899 li
416.792 160.899 li
416.792 163.315 li
414.375 163.315 li
414.375 165.732 li
cp
409.375 175.232 mo
411.792 175.232 li
411.792 177.649 li
414.208 177.649 li
414.208 175.232 li
416.625 175.232 li
416.625 172.815 li
414.208 172.815 li
414.208 170.399 li
411.792 170.399 li
411.792 172.815 li
409.375 172.815 li
409.375 175.232 li
cp
404.625 181.482 mo
407.042 181.482 li
407.042 183.899 li
409.458 183.899 li
409.458 181.482 li
411.875 181.482 li
411.875 179.065 li
409.458 179.065 li
409.458 176.649 li
407.042 176.649 li
407.042 179.065 li
404.625 179.065 li
404.625 181.482 li
cp
399.625 193.482 mo
402.042 193.482 li
402.042 195.899 li
404.458 195.899 li
404.458 193.482 li
406.875 193.482 li
406.875 191.065 li
404.458 191.065 li
404.458 188.649 li
402.042 188.649 li
402.042 191.065 li
399.625 191.065 li
399.625 193.482 li
cp
394.625 198.982 mo
397.042 198.982 li
397.042 201.399 li
399.458 201.399 li
399.458 198.982 li
401.875 198.982 li
401.875 196.566 li
399.458 196.566 li
399.458 194.149 li
397.042 194.149 li
397.042 196.566 li
394.625 196.566 li
394.625 198.982 li
cp
389.875 207.232 mo
392.292 207.232 li
392.292 209.649 li
394.708 209.649 li
394.708 207.232 li
397.125 207.232 li
397.125 204.816 li
394.708 204.816 li
394.708 202.399 li
392.292 202.399 li
392.292 204.816 li
389.875 204.816 li
389.875 207.232 li
cp
384.875 215.482 mo
387.292 215.482 li
387.292 217.899 li
389.708 217.899 li
389.708 215.482 li
392.125 215.482 li
392.125 213.066 li
389.708 213.066 li
389.708 210.649 li
387.292 210.649 li
387.292 213.066 li
384.875 213.066 li
384.875 215.482 li
cp
379.875 221.732 mo
382.292 221.732 li
382.292 224.149 li
384.708 224.149 li
384.708 221.732 li
387.125 221.732 li
387.125 219.316 li
384.708 219.316 li
384.708 216.899 li
382.292 216.899 li
382.292 219.316 li
379.875 219.316 li
379.875 221.732 li
cp
375.125 229.732 mo
377.542 229.732 li
377.542 232.149 li
379.958 232.149 li
379.958 229.732 li
382.375 229.732 li
382.375 227.316 li
379.958 227.316 li
379.958 224.899 li
377.542 224.899 li
377.542 227.316 li
375.125 227.316 li
375.125 229.732 li
cp
370.125 236.482 mo
372.542 236.482 li
372.542 238.899 li
374.958 238.899 li
374.958 236.482 li
377.375 236.482 li
377.375 234.066 li
374.958 234.066 li
374.958 231.649 li
372.542 231.649 li
372.542 234.066 li
370.125 234.066 li
370.125 236.482 li
cp
365.125 246.232 mo
367.542 246.232 li
367.542 248.649 li
369.958 248.649 li
369.958 246.232 li
372.375 246.232 li
372.375 243.816 li
369.958 243.816 li
369.958 241.399 li
367.542 241.399 li
367.542 243.816 li
365.125 243.816 li
365.125 246.232 li
cp
360.125 248.482 mo
362.542 248.482 li
362.542 250.899 li
364.958 250.899 li
364.958 248.482 li
367.375 248.482 li
367.375 246.066 li
364.958 246.066 li
364.958 243.649 li
362.542 243.649 li
362.542 246.066 li
360.125 246.066 li
360.125 248.482 li
cp
355.375 256.732 mo
357.792 256.732 li
357.792 259.149 li
360.208 259.149 li
360.208 256.732 li
362.625 256.732 li
362.625 254.316 li
360.208 254.316 li
360.208 251.899 li
357.792 251.899 li
357.792 254.316 li
355.375 254.316 li
355.375 256.732 li
cp
350.375 263.232 mo
352.792 263.232 li
352.792 265.649 li
355.208 265.649 li
355.208 263.232 li
357.625 263.232 li
357.625 260.816 li
355.208 260.816 li
355.208 258.399 li
352.792 258.399 li
352.792 260.816 li
350.375 260.816 li
350.375 263.232 li
cp
345.375 271.982 mo
347.792 271.982 li
347.792 274.399 li
350.208 274.399 li
350.208 271.982 li
352.625 271.982 li
352.625 269.566 li
350.208 269.566 li
350.208 267.149 li
347.792 267.149 li
347.792 269.566 li
345.375 269.566 li
345.375 271.982 li
cp
340.625 274.232 mo
343.042 274.232 li
343.042 276.649 li
345.458 276.649 li
345.458 274.232 li
347.875 274.232 li
347.875 271.816 li
345.458 271.816 li
345.458 269.399 li
343.042 269.399 li
343.042 271.816 li
340.625 271.816 li
340.625 274.232 li
cp
335.625 282.982 mo
338.042 282.982 li
338.042 285.399 li
340.458 285.399 li
340.458 282.982 li
342.875 282.982 li
342.875 280.566 li
340.458 280.566 li
340.458 278.149 li
338.042 278.149 li
338.042 280.566 li
335.625 280.566 li
335.625 282.982 li
cp
330.625 287.482 mo
333.042 287.482 li
333.042 289.899 li
335.458 289.899 li
335.458 287.482 li
337.875 287.482 li
337.875 285.066 li
335.458 285.066 li
335.458 282.649 li
333.042 282.649 li
333.042 285.066 li
330.625 285.066 li
330.625 287.482 li
cp
325.875 293.732 mo
328.292 293.732 li
328.292 296.149 li
330.708 296.149 li
330.708 293.732 li
333.125 293.732 li
333.125 291.316 li
330.708 291.316 li
330.708 288.899 li
328.292 288.899 li
328.292 291.316 li
325.875 291.316 li
325.875 293.732 li
cp
320.875 295.982 mo
323.292 295.982 li
323.292 298.399 li
325.708 298.399 li
325.708 295.982 li
328.125 295.982 li
328.125 293.566 li
325.708 293.566 li
325.708 291.149 li
323.292 291.149 li
323.292 293.566 li
320.875 293.566 li
320.875 295.982 li
cp
315.875 297.732 mo
318.292 297.732 li
318.292 300.149 li
320.708 300.149 li
320.708 297.732 li
323.125 297.732 li
323.125 295.316 li
320.708 295.316 li
320.708 292.899 li
318.292 292.899 li
318.292 295.316 li
315.875 295.316 li
315.875 297.732 li
cp
311.125 300.732 mo
313.542 300.732 li
313.542 303.149 li
315.958 303.149 li
315.958 300.732 li
318.375 300.732 li
318.375 298.316 li
315.958 298.316 li
315.958 295.899 li
313.542 295.899 li
313.542 298.316 li
311.125 298.316 li
311.125 300.732 li
cp
306.125 297.232 mo
308.542 297.232 li
308.542 299.649 li
310.958 299.649 li
310.958 297.232 li
313.375 297.232 li
313.375 294.816 li
310.958 294.816 li
310.958 292.399 li
308.542 292.399 li
308.542 294.816 li
306.125 294.816 li
306.125 297.232 li
cp
301.125 291.982 mo
303.542 291.982 li
303.542 294.399 li
305.958 294.399 li
305.958 291.982 li
308.375 291.982 li
308.375 289.566 li
305.958 289.566 li
305.958 287.149 li
303.542 287.149 li
303.542 289.566 li
301.125 289.566 li
301.125 291.982 li
cp
296.375 287.732 mo
298.792 287.732 li
298.792 290.149 li
301.208 290.149 li
301.208 287.732 li
303.625 287.732 li
303.625 285.316 li
301.208 285.316 li
301.208 282.899 li
298.792 282.899 li
298.792 285.316 li
296.375 285.316 li
296.375 287.732 li
cp
291.375 280.982 mo
293.792 280.982 li
293.792 283.399 li
296.208 283.399 li
296.208 280.982 li
298.625 280.982 li
298.625 278.566 li
296.208 278.566 li
296.208 276.149 li
293.792 276.149 li
293.792 278.566 li
291.375 278.566 li
291.375 280.982 li
cp
286.375 274.732 mo
288.792 274.732 li
288.792 277.149 li
291.208 277.149 li
291.208 274.732 li
293.625 274.732 li
293.625 272.316 li
291.208 272.316 li
291.208 269.899 li
288.792 269.899 li
288.792 272.316 li
286.375 272.316 li
286.375 274.732 li
cp
281.375 270.482 mo
283.792 270.482 li
283.792 272.899 li
286.208 272.899 li
286.208 270.482 li
288.625 270.482 li
288.625 268.066 li
286.208 268.066 li
286.208 265.649 li
283.792 265.649 li
283.792 268.066 li
281.375 268.066 li
281.375 270.482 li
cp
276.625 263.482 mo
279.042 263.482 li
279.042 265.899 li
281.458 265.899 li
281.458 263.482 li
283.875 263.482 li
283.875 261.066 li
281.458 261.066 li
281.458 258.649 li
279.042 258.649 li
279.042 261.066 li
276.625 261.066 li
276.625 263.482 li
cp
271.625 257.482 mo
274.042 257.482 li
274.042 259.899 li
276.458 259.899 li
276.458 257.482 li
278.875 257.482 li
278.875 255.066 li
276.458 255.066 li
276.458 252.649 li
274.042 252.649 li
274.042 255.066 li
271.625 255.066 li
271.625 257.482 li
cp
266.625 250.232 mo
269.042 250.232 li
269.042 252.649 li
271.458 252.649 li
271.458 250.232 li
273.875 250.232 li
273.875 247.816 li
271.458 247.816 li
271.458 245.399 li
269.042 245.399 li
269.042 247.816 li
266.625 247.816 li
266.625 250.232 li
cp
261.875 240.732 mo
264.292 240.732 li
264.292 243.149 li
266.708 243.149 li
266.708 240.732 li
269.125 240.732 li
269.125 238.316 li
266.708 238.316 li
266.708 235.899 li
264.292 235.899 li
264.292 238.316 li
261.875 238.316 li
261.875 240.732 li
cp
256.875 235.232 mo
259.292 235.232 li
259.292 237.649 li
261.708 237.649 li
261.708 235.232 li
264.125 235.232 li
264.125 232.816 li
261.708 232.816 li
261.708 230.399 li
259.292 230.399 li
259.292 232.816 li
256.875 232.816 li
256.875 235.232 li
cp
251.875 229.982 mo
254.292 229.982 li
254.292 232.399 li
256.708 232.399 li
256.708 229.982 li
259.125 229.982 li
259.125 227.566 li
256.708 227.566 li
256.708 225.149 li
254.292 225.149 li
254.292 227.566 li
251.875 227.566 li
251.875 229.982 li
cp
247.125 220.982 mo
249.542 220.982 li
249.542 223.399 li
251.958 223.399 li
251.958 220.982 li
254.375 220.982 li
254.375 218.566 li
251.958 218.566 li
251.958 216.149 li
249.542 216.149 li
249.542 218.566 li
247.125 218.566 li
247.125 220.982 li
cp
242.125 214.232 mo
244.542 214.232 li
244.542 216.649 li
246.958 216.649 li
246.958 214.232 li
249.375 214.232 li
249.375 211.816 li
246.958 211.816 li
246.958 209.399 li
244.542 209.399 li
244.542 211.816 li
242.125 211.816 li
242.125 214.232 li
cp
237.125 207.482 mo
239.542 207.482 li
239.542 209.899 li
241.958 209.899 li
241.958 207.482 li
244.375 207.482 li
244.375 205.066 li
241.958 205.066 li
241.958 202.649 li
239.542 202.649 li
239.542 205.066 li
237.125 205.066 li
237.125 207.482 li
cp
232.375 198.232 mo
234.792 198.232 li
234.792 200.649 li
237.208 200.649 li
237.208 198.232 li
239.625 198.232 li
239.625 195.816 li
237.208 195.816 li
237.208 193.399 li
234.792 193.399 li
234.792 195.816 li
232.375 195.816 li
232.375 198.232 li
cp
227.375 190.732 mo
229.792 190.732 li
229.792 193.149 li
232.208 193.149 li
232.208 190.732 li
234.625 190.732 li
234.625 188.315 li
232.208 188.315 li
232.208 185.899 li
229.792 185.899 li
229.792 188.315 li
227.375 188.315 li
227.375 190.732 li
cp
222.375 184.482 mo
224.792 184.482 li
224.792 186.899 li
227.208 186.899 li
227.208 184.482 li
229.625 184.482 li
229.625 182.065 li
227.208 182.065 li
227.208 179.649 li
224.792 179.649 li
224.792 182.065 li
222.375 182.065 li
222.375 184.482 li
cp
217.625 173.232 mo
220.042 173.232 li
220.042 175.649 li
222.458 175.649 li
222.458 173.232 li
224.875 173.232 li
224.875 170.815 li
222.458 170.815 li
222.458 168.399 li
220.042 168.399 li
220.042 170.815 li
217.625 170.815 li
217.625 173.232 li
cp
212.625 162.232 mo
215.042 162.232 li
215.042 164.649 li
217.458 164.649 li
217.458 162.232 li
219.875 162.232 li
219.875 159.815 li
217.458 159.815 li
217.458 157.399 li
215.042 157.399 li
215.042 159.815 li
212.625 159.815 li
212.625 162.232 li
cp
207.625 158.232 mo
210.042 158.232 li
210.042 160.649 li
212.458 160.649 li
212.458 158.232 li
214.875 158.232 li
214.875 155.815 li
212.458 155.815 li
212.458 153.399 li
210.042 153.399 li
210.042 155.815 li
207.625 155.815 li
207.625 158.232 li
cp
202.625 148.232 mo
205.042 148.232 li
205.042 150.649 li
207.458 150.649 li
207.458 148.232 li
209.875 148.232 li
209.875 145.815 li
207.458 145.815 li
207.458 143.399 li
205.042 143.399 li
205.042 145.815 li
202.625 145.815 li
202.625 148.232 li
cp
197.875 137.982 mo
200.292 137.982 li
200.292 140.399 li
202.708 140.399 li
202.708 137.982 li
205.125 137.982 li
205.125 135.565 li
202.708 135.565 li
202.708 133.149 li
200.292 133.149 li
200.292 135.565 li
197.875 135.565 li
197.875 137.982 li
cp
192.875 130.732 mo
195.292 130.732 li
195.292 133.149 li
197.708 133.149 li
197.708 130.732 li
200.125 130.732 li
200.125 128.315 li
197.708 128.315 li
197.708 125.899 li
195.292 125.899 li
195.292 128.315 li
192.875 128.315 li
192.875 130.732 li
cp
187.875 118.982 mo
190.292 118.982 li
190.292 121.399 li
192.708 121.399 li
192.708 118.982 li
195.125 118.982 li
195.125 116.565 li
192.708 116.565 li
192.708 114.149 li
190.292 114.149 li
190.292 116.565 li
187.875 116.565 li
187.875 118.982 li
cp
183.125 106.482 mo
185.542 106.482 li
185.542 108.899 li
187.958 108.899 li
187.958 106.482 li
190.375 106.482 li
190.375 104.065 li
187.958 104.065 li
187.958 101.649 li
185.542 101.649 li
185.542 104.065 li
183.125 104.065 li
183.125 106.482 li
cp
178.125 99.4824 mo
180.542 99.4824 li
180.542 101.899 li
182.958 101.899 li
182.958 99.4824 li
185.375 99.4824 li
185.375 97.0654 li
182.958 97.0654 li
182.958 94.6489 li
180.542 94.6489 li
180.542 97.0654 li
178.125 97.0654 li
178.125 99.4824 li
cp
173.125 84.4824 mo
175.542 84.4824 li
175.542 86.8989 li
177.958 86.8989 li
177.958 84.4824 li
180.375 84.4824 li
180.375 82.0654 li
177.958 82.0654 li
177.958 79.6489 li
175.542 79.6489 li
175.542 82.0654 li
173.125 82.0654 li
173.125 84.4824 li
cp
168.375 73.2324 mo
170.792 73.2324 li
170.792 75.6489 li
173.208 75.6489 li
173.208 73.2324 li
175.625 73.2324 li
175.625 70.8154 li
173.208 70.8154 li
173.208 68.3989 li
170.792 68.3989 li
170.792 70.8154 li
168.375 70.8154 li
168.375 73.2324 li
cp
163.375 63.9824 mo
165.792 63.9824 li
165.792 66.3989 li
168.208 66.3989 li
168.208 63.9824 li
170.625 63.9824 li
170.625 61.5654 li
168.208 61.5654 li
168.208 59.1489 li
165.792 59.1489 li
165.792 61.5654 li
163.375 61.5654 li
163.375 63.9824 li
cp
158.375 53.2324 mo
160.792 53.2324 li
160.792 55.6489 li
163.208 55.6489 li
163.208 53.2324 li
165.625 53.2324 li
165.625 50.8154 li
163.208 50.8154 li
163.208 48.3989 li
160.792 48.3989 li
160.792 50.8154 li
158.375 50.8154 li
158.375 53.2324 li
cp
153.625 40.4824 mo
156.042 40.4824 li
156.042 42.8989 li
158.458 42.8989 li
158.458 40.4824 li
160.875 40.4824 li
160.875 38.0654 li
158.458 38.0654 li
158.458 35.6489 li
156.042 35.6489 li
156.042 38.0654 li
153.625 38.0654 li
153.625 40.4824 li
cp
148.625 24.4824 mo
151.042 24.4824 li
151.042 26.8989 li
153.458 26.8989 li
153.458 24.4824 li
155.875 24.4824 li
155.875 22.0654 li
153.458 22.0654 li
153.458 19.6489 li
151.042 19.6489 li
151.042 22.0654 li
148.625 22.0654 li
148.625 24.4824 li
cp
525.25 20.7739 mo
538.5 20.7739 li
531.75 31.0239 mo
538.5 31.0239 li
531.75 41.0239 mo
538.5 41.0239 li
531.75 51.2739 mo
538.5 51.2739 li
531.75 61.2739 mo
538.5 61.2739 li
525.25 71.5239 mo
538.5 71.5239 li
531.75 81.5239 mo
538.5 81.5239 li
531.75 91.5239 mo
538.5 91.5239 li
531.75 101.774 mo
538.5 101.774 li
531.75 111.774 mo
538.5 111.774 li
525.25 122.024 mo
538.5 122.024 li
531.75 132.024 mo
538.5 132.024 li
531.75 142.274 mo
538.5 142.274 li
531.75 152.274 mo
538.5 152.274 li
531.75 162.524 mo
538.5 162.524 li
525.25 172.524 mo
538.5 172.524 li
531.75 182.774 mo
538.5 182.774 li
531.75 192.774 mo
538.5 192.774 li
531.75 203.024 mo
538.5 203.024 li
531.75 213.024 mo
538.5 213.024 li
525.25 223.274 mo
538.5 223.274 li
531.75 233.274 mo
538.5 233.274 li
531.75 243.524 mo
538.5 243.524 li
531.75 253.524 mo
538.5 253.524 li
531.75 263.774 mo
538.5 263.774 li
525.25 273.774 mo
538.5 273.774 li
531.75 284.024 mo
538.5 284.024 li
531.75 294.024 mo
538.5 294.024 li
531.75 304.274 mo
538.5 304.274 li
531.75 314.274 mo
538.5 314.274 li
525.25 324.524 mo
538.5 324.524 li
538.5 324.524 mo
538.5 20.7739 li
@
2.25 lw
412.5 175.774 mo
414.5 172.774 li
316 297.524 mo
318 297.524 li
320 297.274 li
322 296.524 li
324 295.774 li
326 294.774 li
328 293.274 li
330 291.774 li
331.75 290.024 li
333.75 288.024 li
335.75 285.774 li
337.75 283.524 li
339.75 281.274 li
341.75 278.774 li
343.75 276.274 li
345.75 273.774 li
347.5 271.274 li
349.5 268.524 li
351.5 266.024 li
353.5 263.274 li
355.5 260.524 li
357.5 257.774 li
359.5 255.024 li
361.5 252.274 li
363.25 249.524 li
365.25 246.774 li
367.25 244.024 li
369.25 241.274 li
371.25 238.524 li
373.25 235.774 li
375.25 232.774 li
377.25 230.024 li
379 227.274 li
381 224.274 li
383 221.524 li
385 218.524 li
387 215.524 li
389 212.774 li
391 209.774 li
393 206.774 li
394.75 203.774 li
396.75 200.774 li
398.75 197.774 li
400.75 194.524 li
402.75 191.524 li
404.75 188.524 li
406.75 185.274 li
408.75 182.274 li
410.5 179.024 li
412.5 175.774 li
219.75 172.024 mo
221.75 175.274 li
223.5 178.274 li
225.5 181.524 li
227.5 184.774 li
229.5 187.774 li
231.5 190.774 li
233.5 194.024 li
235.5 197.024 li
237.5 200.024 li
239.25 203.024 li
241.25 206.024 li
243.25 209.024 li
245.25 212.024 li
247.25 215.024 li
249.25 217.774 li
251.25 220.774 li
253 223.524 li
255 226.524 li
257 229.274 li
259 232.274 li
261 235.024 li
263 237.774 li
265 240.524 li
267 243.524 li
268.75 246.274 li
270.75 249.024 li
272.75 251.774 li
274.75 254.524 li
276.75 257.274 li
278.75 259.774 li
280.75 262.524 li
282.75 265.274 li
284.5 267.774 li
286.5 270.524 li
288.5 273.024 li
290.5 275.774 li
292.5 278.274 li
294.5 280.524 li
296.5 283.024 li
298.5 285.274 li
300.25 287.524 li
302.25 289.524 li
304.25 291.274 li
306.25 293.024 li
308.25 294.274 li
310.25 295.524 li
312.25 296.524 li
314.25 297.024 li
316 297.524 li
@
226.75 251.524 mo
226.75 316.774 li
102 316.774 li
102 251.524 li
226.75 251.524 li
cp
0 0 0 0 cmyk
f
0.75 lw
117.75 264.149 mo
115.333 267.774 li
117.75 271.399 li
120.167 267.774 li
117.75 264.149 li
cp
0 0 0 1 cmyk
@
114.125 301.732 mo
116.542 301.732 li
116.542 304.149 li
118.958 304.149 li
118.958 301.732 li
121.375 301.732 li
121.375 299.316 li
118.958 299.316 li
118.958 296.899 li
116.542 296.899 li
116.542 299.316 li
114.125 299.316 li
114.125 301.732 li
cp
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginEXWBJQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7F374C62B140C32819FDD54E0FF4342461D2A31EB8866A6299E899689> |-/L <1C60D8A8C9B7EF320B5E1B1901757FD427860A5A6931496E07> |-/m <1C60D8A8C9B6B41C87955CDC3639140F8FA33C70CE271539122DB89AC63FD596C1AE79761050C7D5317C1A1DE3923CB96B736E4977F68D67BD6922E1964FE05D51AB32C479ED8218C444609251096F1947B0C4960920FFF6AE70BA15738BF1106729A839E228137A715EA1C031F63BED533B4300B92AAA320484B5BAB342D2B48F6B68F518B0142254C333F20247ED0EA3DC72FEE0> |-systemdict /gcheck known {setglobal} if end {end} ifendEXWBJQ+Helvetica /Encoding getdup 61 /equal putdup 76 /L putdup 109 /m putpop%ADOEndSubsetFont
/EXWBJQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 4{/.notdef}rp /equal 3{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n 3{/.notdef}rp /r /s /t /u /.notdef /w /x 135{/.notdef}rp]EXWBJQ+Helvetica nfEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf364.992 58.5161 mo( 0.5\) mrad)[4.97852 9.9668 4.97852 9.9668 5.9668 4.97949 14.9277 5.9668 9.9668 0 ]xsh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /theta putdup 177 /plusminus putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/theta <1C60D8A8C9B7B202EB8FDA93F636BC810CE8DD1D07FEA545978EB1838D3B614B81479C395CA88F7627B9CF3DB3BA04295E8C4C4ACA6486D548ACA634F76CEB14E9729B753C0A7D1B36069AF7CDCBA91510EDC639C978184FDA94CFD8AB60E9076EEBD43CE20016A55C7302D72B1B5009DD2E0113D8013B51229D3985F5AD7943BAC0412A6149E79C911795A5EA98A414419F8C4E0364F4E710F8195523AAA650DE0EB1843D10FFCFA16118FE6FF38CB9310CD17B978F37> |-/plusminus <1C60D8A8C9B79676F49931FEB91792C79DFA76BBE21A331972920FF5C98E383F403921EEBF45AB959FA95FF1B52623A9BF47427711C4B00EE633F0958E88F8324165E4> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EXWBJR+Symbol /Symbol findfont ct_VMDictPut/EXWBJR+Symbol*1 [113{/.notdef}rp /theta 63{/.notdef}rp /plusminus 78{/.notdef}rp]EXWBJR+Symbol nfEXWBJR+Symbol*1 [17.9202 0 0 -17.9202 0 0 ]msf355.242 58.5161 mo(\261)shEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf241.992 58.5161 mo(\(2 T\) = \(205.5 )[5.96777 9.96631 4.97852 10.9463 5.96777 4.979 10.4648 4.97852 5.96777 9.9668 9.96582 9.9668 4.97852 9.96582 0 ]xshEXWBJQ+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf235.5 64.2661 mo(L)shEXWBJR+Symbol*1 [17.9202 0 0 -17.9202 0 0 ]msf226.492 58.5161 mo(q)shEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf345.242 85.5083 mo( 0.5\) mrad)[4.97852 9.9668 4.97852 9.9668 5.9668 4.97949 14.9277 5.9668 9.9668 0 ]xshEXWBJR+Symbol*1 [17.9202 0 0 -17.9202 0 0 ]msf335.492 85.5083 mo(\261)shEXWBJQ+Helvetica*1 [17.9202 0 0 -17.9202 0 0 ]msf241.992 85.5083 mo(\(0 T\) = \(1.5 )[5.96777 9.96631 4.97852 10.9463 5.96777 4.979 10.4648 4.97852 5.96777 9.9668 4.97852 9.96582 0 ]xshEXWBJQ+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf235.5 91.2739 mo(L)shEXWBJR+Symbol*1 [17.9202 0 0 -17.9202 0 0 ]msf226.492 85.5083 mo(q)sh%ADOBeginSubsetFont: Helvetica-BoldOblique Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-BoldOblique def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 76 /L putdup 83 /S putdup 84 /T putdef/FontBBox {-1001 -481 1589 1175} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6079F6C9C5B6880C89408E8AD9743F80D45518E28653C59C8B376144C36> |-/A <1C60D8A8C9B6079F6DFE15C6266A251FB5B8D8D5584AE3EEC39DFF581EDC95BF34DD7AAC3E9CB06759877C409531EAE9543B4B99> |-/L <1C60D8A8C9B7D8BE36E7EBDDF0070778C0279B5266B6F2A3E73221BA4CCF> |-/S <1C60D8A8C9B64EDFE0426F2D6A8EF3ECBFF0DE703EFE100555C0A6BB22967992DC05FE9CAFB18C53F85A24A779191D61FB4CC3D83DD6492E153A894B0F1D5D2E0DA400C1F899664912D60869A496B24CFB2CA43F7171FC9E5E96D7CDCF00F32BA7BCF972BCE690B9B6E784EF65E516CF5255704F64C647782959A725F24FDC36839BC9139942CF6A9869D73E111FAF7C8B4086FA8973E15C6ACB30C1E219DF9927737CE3D640C61D6014B15F834FE7B072FBC83C1AEA3A57556EE347159055CF> |-/T <1C60D8A8C9B7D8BE1619527895B6DF8AA56FDB931B3588C60A84BF0F2A97EAFE1487A42B62FF340D2CF5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EXWBJS+Helvetica-BoldOblique /Helvetica-BoldOblique findfont ct_VMDictPut/EXWBJS+Helvetica-BoldOblique*1 [65{/.notdef}rp /A 10{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]EXWBJS+Helvetica-BoldOblique nfEXWBJS+Helvetica-BoldOblique*1 [17.9202 0 0 -17.9202 0 0 ]msf339.734 316.774 mo(ATLAS)[12.9414 10.9463 10.9463 12.9414 0 ]xsh0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 78 /N putdup 79 /O putdup 97 /a putdup 100 /d putdup 101 /e putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 115 /s putdup 127 /f_i putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/space <1C60D8A8C9B896187A> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F872B2DD35BA9F526AA31403949B904F2FBFFA219269CB793CC5D4E2B92EAFFDD1A748A3F84A703B249550493724F424782ACE69D75F53E9659B9B2838FB0059CC29141042064D2E7FC418574> |-/O <1C60D8A8C9B624F9257693AA048B36DADFC211B8894F7756BF33A04DC83C0B4C52C95D9CA2F8E3A6F92259B8EFC855E76BA25786D3A63D8F17EAD5862D556BB80BAD93C174B7B09C35FAA86BAE6F39D6EA2536F89B8D1AF08D0CC0EEA8CAA25E3645138071> |-/a <1C60D8A8C9B75946039FC5B56ED6A5087B2F0B1630F4B839ECBCEEA44E703DC4106323B0FE7E2AB642908C4D63FEEE93FCF9AFDA709EC76B2A6B438866EA54711295464BD953D3EBDCF028F138C8DA98583AEFEA07E0E3D9318DCAA5235C81F8CAE77869F7E7DB4FE2A895A8751E9713E402E5F56B8D9F8A85A4E816A3F5736139BBC6E35318419585355BABA3365F9437068F54844360043E93A0587094DC5B241D2351AD29DD00EC> |-/d <1C60D8A8C9B7E7C1D822193538A56B13640F1C3EE80C415BBD7C96E2BF73396DB0D9C9230D7704B1D4903E1B0E823160B234020A503047A686661C34B5004CDCF7754772CF263A11D6B8FC7868BB12CD6A915ACD880C8B0638C394417FA37BE535ADC2EFE334704B66B55FC93ABE48255DC988A5DFABA294BF5BF2E02BE2314DCE6531FAA5DCB4D56DF6C62A6139D41B024DA04272B4B444C44FEBCD2F65888A63654699808BEDAA> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6AE0C2DA4B5701EEA600446C4909FC3F4672ADE87F21B90EA46B653B923660515A1F0669DD61FD45BFFE5F30C06F25F4918DC3BDE9DA8749DE48AB2064D02996B1992D92D740E924FC0328428444D7F57E818435DFAAB95E4B5> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A550BE990A2B15CF4B9FA0C60C03D9F761CF6CBFF51A513DE> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/n <1C60D8A8C9B790A816BA887E1EEB5EA22251B57591287932F226429470C6F5104125FD46BD566113711AC75833C9FEE3F6D848EF41B3B29B720FE91D57099036ACB328FF5F27B548C47B09DAAAB22DF7203FD31E4DFCBB6F334EB2AEBC18B95062C1F81D8B> |-/o <1C60D8A8C9B7967683396363C51B2F1979461F3A00FDA36B3FB5488A82D64C89239EA1345F90503AC4C4937CA1D31AE0456BBFC2CD7E6DF92400B629A703DCCA1CE977B1CE09DA127A889A27E67B6982945251> |-/s <1C60D8A8C9B70FAD6F31E6985339BF1E83F7AE60D35F00D12D254421A910254A631180139D8657646BEFE6F4E230D67403BE5D54183419D174C6F3CC672FE0922A5983FC4713FC0C33086E01CB29AB5EA82B559EB0CB9E6675519A48B6C99CE7F0B78BC22FE4480BA1B895> |-/f_i <1C60D8A8C9B7B07F53A1558F68652DF6013355F9F1E87F51401AE8ECD01A640086BEE1033CF3BB3831C899F6AF52CD0D02B6946DDDE924F27473B8E54A3ED8BEE9B02A2E6BFE94F31C79E2E1614FBCE3CB362A12E60E538207D3> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/EXWBJT+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/EXWBJT+MyriadPro-Regular*1 [32{/.notdef}rp /space 45{/.notdef}rp /N /O 17{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 3{/.notdef}rp /s 11{/.notdef}rp /f_i 128{/.notdef}rp]EXWBJT+MyriadPro-Regular nfEXWBJT+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf128 271.024 mo(solenoidal \177eld ON)[4.75195 6.58789 2.83203 6.01172 6.66016 6.58789 2.80762 6.76807 5.78418 2.83154 2.54395 6.27637 6.01172 2.83203 6.76758 2.54395 8.26807 0 ]xsh%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginEXWBJT+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E8BCF65E1A153B8F64C14E4D433BE34E80499C2222430927749B4F85A3CF0F> |-systemdict /gcheck known {setglobal} if end {end} ifendEXWBJT+MyriadPro-Regular /Encoding getdup 70 /F putpop%ADOEndSubsetFont
/EXWBJT+MyriadPro-Regular*1 [32{/.notdef}rp /space 37{/.notdef}rp /F 7{/.notdef}rp /N /O 17{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 3{/.notdef}rp /s 11{/.notdef}rp /f_i 128{/.notdef}rp]EXWBJT+MyriadPro-Regular nfEXWBJT+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf128.5 304.524 mo(solenoidal \177eld OFF)[4.75195 6.58789 2.83203 6.01172 6.66016 6.58789 2.80762 6.76807 5.78418 2.83154 2.54395 6.27637 6.01172 2.83203 6.76758 2.54395 8.26807 5.84424 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/EXWBJT+MyriadPro-Regular*1 uf/EXWBJT+MyriadPro-Regular uf/MyriadPro-Regular uf/EXWBJR+Symbol*1 uf/EXWBJR+Symbol uf/Symbol uf/EXWBJQ+Helvetica*1 uf/EXWBJQ+Helvetica uf/Helvetica uf/EXWBJS+Helvetica-BoldOblique*1 uf/EXWBJS+Helvetica-BoldOblique uf/Helvetica-BoldOblique ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Beniamino Di Girolamo) ()%%Title: (LorentzConf3.eps)%%CreationDate: 3/19/10 3:44 PM%AI9_DataStream%Gb"-6LN_t(&h*U*J:B8]Z,oN\@r+gCkIcd16+4$i-Hql<?[o[K81gN'fQYZPlg7i-'j;WXX/i;$.sO11iG?m*%R(6;^G?glZlpc+%)t?mR,G#ZU*`&nb,u4r,KTgCR.[:LaV.^b^/IgI@^-%chN/)7q1+<][_so"Y;>d=PfJm_sTJt,TL>;)(s0GSd2;@$D-^EXuMMg!G%hI#i\gMW`e!VJ'E)"p#RX^:a7-K@%_s,=S7%VdA5-%F-bbqXZnrD10cluBF>cUO[9=73/tp3]%&>3YbAb&H-S:,gU0!M5.rCLPf]%Fj=UtQ9<H/`1eu2*.>e&\=K;O,=oU-H!DGuHaA`[J`%Ypl@&;N!\]_?q"e0c:(b!5T1.7Qn[*;[__e\CKTi[J+JHQ,A1A?0nV%NM%V9hY7&CUr*_u#6NhjmH]c"VA]GkR83Drgnrf::!.,,7IK*8cRLj7'*UdunC#A@g`RQp;;ojc\jbH*9uOr)Zu!:Bo'_]/uAi-_Fqj%(Yq!#<IR'Dmf"#^4s<P^F,<#mRe>b3m@XjYJfgi2B;`Y-gr%%,hc>%tJ:iCP'@gGfi2/O6OJ`@OLV4Ra1UE2VkUSJ'-d@/%nV#JZ%IQ\dpK:Cg?mVN6VFsA.:kSN26?ufFADhojt6<r/.kY9bDEI5&[:^'h6C/1Mf\NggO543lA#8u7!jD/nnmAQ59PVuG##Br>$ir2`[%s%+<[E2QW[5l6MEWd(Pp,7*8WCXU#C-UP1+ZO="#;B+l=7LF:7J>R]jC/16(%d?@_iV;:LKn#tM>6=X;NP]TX!PdkUr"b4WBf$0H%UJZ7TNPaF`Pe=+ti+qm`+p"MQ$+NVRTN!*9V%SVWL"2Sd6^`$7b,!L:0CTcMV:/6JY2C*g'oPng=G/>c7<h`^6CCFLhGu+_"FOLS%_#$`XHp`3RqFgZP=sS%F9D1OfFa;m]9#6nQ(J;N2fLX+G(_Q[4)&Nt`_RLI/aL<iMpk:dH&c=si"AYb)(_Q\_\D])'KeYl_"Ic-7%-jAX_?RSjP^b[l5cuT7u!_!/:pa':1Od"Xc^6?9netM8CN`ZVY%na\5i"p,P1Isu0hN8\.^JG9Wa(C](KmX9gK3u-@d?46[?da"?%!l%P=`Ws7h(($9<\<?QZ7>:okF+unqc:Is@e=dS-)hSM93U&^!SFh`H958)177se6:^0D00G?n\?^"?N[kL#@Ki/&g@=/2)jBMD5%1,(bULLE)F3s9T""bPP=LDd6KCkJ;m9Hgp]echOA!dE'S!d2pDJK+6Obm57-krY,=XcqJ\pZ+L57s[p2-Ga:Lk6*]=L'moMn5io_%j;XG@X]BRU0fZ/B:U$>I]o%=/[>I=fV5prHTWHE@oS>dG^/grDqTAZXg*QET01AaRs55Q(MB`!H8`Ym-Qi)c\aM%G:r,[/CEUlNr%9E$6$jBhdXrhWNR5*]SoVs(mCT"Ir#P(//e\QAfoIkFNr7%U?,ahMkagoGqH5=,*8kW-j-r/u=Op[!q<7H9S@`E9cNWW5.SB`uIe%.A*W)P4;-jT-Dkg^5bk.'"k?2`#*fX9"R3j$@Z>/n)KS61qG"[akqK'e4BSU]I$;<*o<%mlEtr!lUoO8P40999l%`:@dFK*bp7SX%g4TE-+4(4];W#o"Q:ZRFI7[<L>-1a\J'61s>`!IkK`)(9ikL2)%P"tXg/B^9j+d<5Otsb7J?PdpPh*3JVW3T@-OAi9s,<4TmF2%j%\<OA,8B5!K"kn1S=&Dr>iICdXeXj95ac\\'r*=pC"2L8=&<1-/,OgX<8/l(lE$#h=Jm\(JNs!`Q_WRY2]OgYo[ZP%,O\sR^a2eqd%20kg'360_us-$XE.JthFi?$U/h[iJHOp&A']bo6C-)!Qm"`'%)>>uc$g+JTXn_C#:hTt4!BnqWTH3S5M*l9`+*Pk_'?d^TPKDJGR%cf$OYDq8]UM,I6fZ5AX6%"eOLCkcB4).(^REUA.[FiEJMf,H)cJ?N)n[K]__j4C-=DV9=]j6#:!p,+_ZlSr2G8hWVaba8UC8V1B9%;H2)H<s@Ui7`'Nd=OPnk^)aTlW$]b.oJ]S8SFqnM''U:M08=+C*)QJu<f%1NJprApeO@#(.V+^,13%BWg1R`[ThWS'iZ+qQXDbPI%85I?2:tl3l&q#q,AB)`o^fCbG`OHUf-);=)6VIRc/U`7i0Qg4S<nfjHD)*IIqpgr44_JO4hCFgel(:"cZKC+1Z4`rYX:e.W(l]t@%W)+C-qp244aALXoRkZZ[:m.q>\ftf@#pf:mZG*#DL)K'Og1(P$"@]bgZ?=(IS`3h%*hHVTMqZjZ<3ejA(r*46*)gg9]tr<7IeCU;%.;P]qBIL@=7J6N`^UL^8P,8D;m0;TIG!f.Ph$oUH;$p%B$8&4T;KreM?^`j<;!Nm@pP7]5CRa_h)N#YN+j+t9FgiP/RHFg"R'Jbt%^5MFfSaR2D-Q=r)J9:ZC>Y/M7Y:=*-.oYQ[#d,p".l`i&n<PKSUZ"9A4Pa$5-hTPnlUkW?[4R[+i'XbJ?#=uDX9P"]UpPc6%+eOI%U[i!12f.<5h4OCpa(H,ZH#EA4e!;BcV7Rk&O0\AVS;<ElT(2K?<K>7AAMRG[k3Ltd3lWZW$>n`U-`r>6*<ufq9Tc`p2p^GtqOmN`%f0]9j/b`')2GY(N3A46t*S`P;=&BGs$+:XcH<4SC#^J=G1!_6q#Ao2U#m(d#$C0:>7-S;U`FTN_FQAV'Ya[lcQP.r0n^tdaSFJ7W%74<7F'"K_nmN+`RneknqIDpFgmF_2^&)he&$R],PU.@1aKrY#,HD9iC8mSqPjZD-$)$M=7@QP4UI;mr>*Yi^K9-eY\F^WFW\2Mco%16J,^Q;'_@\85$1l\#>-(rbDqm7iF':$%K,]G;2F6>]rcGJl<C[?>]]d-oH=;[.f_Y3h+hh.t$$,4pM88]RRP@o7e4*d:$j@u=,8%7Z1CYFQ<b9FTQW@87F"_?ZFC*XA*Tn$15h(f-1`F'gaD"BY/*$8u^=+HqgD32Ij7UUkK_8b/o6EK'`aF:F5jk]"7AJ,R-oYpG&VH%oN[Y&fK,bgdg@&tAUGq<NT)gmXG2DNGlVEK]gsYrQ'GKKV)\^2@Z!`Xk\Gd8$8&%b..K(oo;uJfFuH-U58TQI't*ufH\m?$'FU]>%5B;(8k?sb>HCd'/=eT2-^Je=]7qoT.[]P#%g/]n)I@=WW+QF`TCJRi/LQGOZS^>dc[R0ep9*>o+lq:MGVSsh#EJYu)mL(!]'?QC,%f;_eA\8Y+VeTo4lR/m5c1-*<L`[rnp6fi6OB1Yun"92@ts2eVgN?OT3pZ*6@SRPh6NuJ_^9rW2/kTDgn;6n3/-:Qb&.Z3(UQ)`AI%'KRQ2[CWdQn%j&VGW)KOTT5H-.mu#Kq%@h9@:VDk>N/[o9U.soNg)L1b@m&*n]5cC;"9]VWog>bV8`qq'`'3aqXjj[/X;a288npR%T')eV%(@KRD3meV._hgFL6V4bWaq0'OHXL23fplrOI,*QapKN@'+'`@'pMKo,X!>aPIGq?7"<*f!ok]*R%fkiX7AC/M251Z`hZlK%`tZu+OoE4F;b:=H!@/EXi*`7!(Ml%k,q=VWQC5BW<s-Eg2D<3VbEEq`8NnT#Io>qF"P4J<caCm^rm<!TkaBrElanujn_B8JYXPJ+%<CX"ZI]>edb;&6:VFo3EP3kV_NE6:!Y#RNZ?;nri8Y<rRWn-IY[.e<,qK5+t$b-s]>5H=97.MC[>LCBPEAF'ke'YH#R?!;:77Ga)%`?j)&I;),nX/Q')=t+Z6;48T=^+A5*[&&&-O3oFJ.^Xl!)t4bQ<O5$gVs:?d)+pe?"Qil*Q^8$&C/Hj!g/<kJ&K4-C=#i"60U[Q%%25A5dT?)7)VW/mseQPq`$$Sf7cMC.A7VNIh/QLN'f!":"@XLba)b?,-o@3V9hN46gn/.seicIYIC`k.tbk=0KG$KrXHol`!]L5[I%`Kg,@eu_LC`l^os$:RURpqLWM<!HCe5t02lo3ZMpJtq[k,0.iB%L@`UAm_B3"Np(k4X1Z/i%9;uFp.LrHcIO%9Yj2mb9acU8q#52%n@OT^5G?^tkJ<bLrMH=V,GiV/D#';f=i_V<Gt^T7<,,Ck@7SlK=_3O]n6aYN8BMm51J5"24On.lb(C2Va,m@]YR`'S'4s7G0cp%C%+68u5NSe!ae(Mh8k_c5^5I9<JSob2Z4aA9CLjY/NJ&u)N'?PI0nef'.7.Oj[3`9e;SSkX_N0Kh!fi4!%9tS*!*'%ZN>`i7PM^Bn$%`3i%&mI%JIlbE2T^EZI\%/IVo.rVc:Ac/AT,*Pf6mSd9aZqIFfOtp=G9NNZ!^t$%@6W/(uapttf6`'.2FCdq!c:H?N>1=:T.:kTc%Nt6LUl(AO/Ehn]Q*LTU_E=YMnOkX9O'ktp=4a@q`29,]Jd:WT1d;KLUXWE)B(u)<hg,bAiE:hJdqsc\+9ZPD<gi&4f,GYiBF5arS%g6(8;q/YPDdVDTA?-8p>D`6j(#;`b!qtlF:M"G?Va0)snm-eoKH'_B.h16!drT9n=lbO#\cpZ2olT[1N!e]hJs"fJPJ%'dL5/'G;%eSR6lkQBqIpYHHUmX-rWAn\4+rc$SThl#`[JV;hEF[n.Vaf*mY,C)$^H&?G1:H:05*#WipQQgGls1sMM5`@4)2l'2rV`lI=45IZ_%J053G'UUhDX7pUtb\28[*o`dNQ(mmihr3j*OnUIH0LZN%Eb'jW)0Q!Gn6E$[XOWi^8dFkq.Q[MJc6`fc>`h.(U1NaR:GAQFFKS;&%;^]oW4M'+/6?Q2iS.n$Il=8j<-REY%M-I]_>Oncr1GtSB,M^m],5TRX)";r)P@Dcp?4^X=P83JBI*Mp<c1.mmCX/ej*=`>FGGO%_%hmmXIfF0K`oQi<]p#XE;)1"m@0eo(G&)'CTe'2^A.d!k'g$<-9I2l)l&DP?s#>u/.IB8lsS+01dq.Cs+hC<GCCLV&%pP+/00s5&H%]ppnJ2)+hp]pj?cRK&B$L`5q9h\ij<lP?`ZAqn<dF(FM7^X-:pK'/jb'l>s`mU,O0dd4Lg")NZSl$a'!2=)AtGCp]fE57'H7@O/e%PQgn<RC,8WT2"qhm6C.ABGJ4VKW5?j:NuBcDb^m-LL%iPG+sF-/QKHS\1$T.<=tDo?[4b%)_%6=aRh^\CANdq5"+mpZS@QT^X2YL%Mo`j?;$#l(Ba/_oW47Tu3dT?FdRt]/W6ij!#(SVZ-L-T%XhYa*&$uCG<;GD7'D8@J,7Z)!r9V!=-+O94A[Fh_atDU\[>?tPL,\cK%r(]K(-_`,3g`2=#m7FYAlCbni1KWWGrI9hg1WH&^YAZUEoiIc!ACoWJW9L19$Ji!G-LaibYN-5dnfE4#0gS#7pq%<q,/3.f!AeJ7%/AD_9ZLXO&*'n\"[]=9b01Ie-*Ah&=>S-<#Y]0`XD3FFtE5cZ2>)/&<ApkQ5_[eM/>cN_&M]SW'IZr1Qk\0iL^`51NCp]riKa_]1%7QVcgS\f&QXG%gV;P\eJOh]:&,8fftQ-m`bX=Y7p^8GJ2FSf?+\pqhJqY+=s=.pb*8<t>O^T^,i!b!&SRd%XMim=S&\0t^<0VgXC%+Va0!qa4K\T5o!8`FK,(Rc\iWr(h)69,q<%8]-mNod:Q7+M]igEA#Db\l@N!Q>RXC:R<Qu=+AejG"4^FS'cI?)NLMPQm/4f+O\d(%^8(3151l^9>%l^`F7cC-(IIs!:csE>j5Jn^%H[V'[h&k9ihZZ7T4m$[Kfd4:TUcHF>"FYk%q+A;,;db.K%BZ1W7$rOocG'V6Jsd(%<!O6W`+piN-hi8sb5K`[T*]VK$S37YjY7dqM['\)4e9D"'LM+*X]b<<NGUFdiCd4YV("t'd,O;"g,?_t.Cj>JoE>d1l"DbNAV:@n%>OO1E:8%?=Zp=(WK:Q.lWmD@pn7%'`X),=eNHY\T4WLfm8$&YH/<l,pmhD!p4LKK.&>qJbY<;TAkuc$Ias`^2#sS]CX,[5<,%dS,%,QLoSXm(YRJSA2'>#PmhKnA)3']j48@@8d+Du/9"GGg[Xn!,bfa$YUjLk-nPVd;Z3ll&&tf.G7=Wsf-g.3lZQgea6@r&ltU9mKl?%RbXn&;2Qj`T^5d6Eb4D"Von3dM@#DCKFKXR<L,;L8LWYU'13M?V54o98d&jmUC?F(1Xnj?P6/?*0pO)Tm=n8-`u.cnM!60\.aWU$%n,jVm(o&pBiSfM*';.$1.m!6&US5^7fD:B7fF()G_(j&S2M*lef8JJo]rI*JZVc/?5'2')A2Z'e]%SPTdaac\2Wur;]0X.r:JVO#%7%T+%h3$$h^7-j%RXK"B\%WEq5p+P\lIGR/4-f1`\o*/(eTdiCSkVC-DMH'#dQd+LV47*3IL>3:*Go'>%gM2!!pTNHBE<NSq=4)a%f*X!Eh?&$!Dm$e+6sDCs?Zk*m%2c`Z=sEDNBWQeF7p5d3hm1!,ck<PKm\I$q,PU7#-kG%pYQ$o#;;]*r'!UkR%W(oSH170U6Q<Z6%>^:pEe;[h[n]7_FQmP3U&`:?Sf<Yh(@=JFZa;`a'c&mss48l8=P1L2j(iAG,DTC(g.Y7L?r'g6O99R@PV:%?MI@g(b6ImtJ:#:C.%m.;Afm?)oV5eB7pfuTg=%>Lg\aB>i&DZi@pl6?ASh?k4bkl2/0F*eW[mf,R38*Jq?4o3JoCu]WtnQFN.TVqNc\D07$ccA*>>T8LO%^SAOJD/LUs_B3Mor'TjD2XLjA]C11>2g$>@LB\jt6g_nn:qMQKe8Fgf[@@"[mABnW]BMOJ][D:cGbse`fC*JK&(.HM+/2j$5=D^'%Iu%F-rt)k9rul]Rr\O0r.Jt'0Pna3+]h/W]L0c0[5=;W;_OmN'8`A"BX/,5tkZ(OU1\<.Gr#'gG'`JZW')rNV'*#/aX%2fh3U9D3%(R5J-$hc<bBLhZSHS(]Y)QOLnK8us&Ygl3J1jee8.c\6M[%-kk+#aT=qu4@5\ThR"D:_3Bkm)!A&Tu/$WfE^'\RFJ!bNN5"J\31!%/Z@h3UQ88@\q_Vte%W+AB>eKQ28\bnB#%[gT6W<7s,d-Te!%+H7lGb*\)I:th]&6?U#pGXm^?_+H/_0sLPk67j6$B4.b7E\=/u5P%m<-G>J<Z0S,'=#+jXpC(rrEiT]_1\$-EhnVa-/ZneukoYnt[l6=0jhqA`<I'UtbsP;c8SJA>6X3+,(1KJ?f9moS2aO\`3fJXCUhH%NiU^LOX!:"@me=W/Pj^^+RI.hQX8/5Y6YH^&e^5EheffJZ4k0cS^mb:KqA+`nPY.:Ii+qhGjX0p3pclL9(r/O0JdDE$Ntet>%17S%n[G\0e<bY^=8lQ/V3CZRr/5dZ5J.CO]l*^sSJK[>c&jNefeX`75>LA7T0H%p--:$EIlkNp5<Y$oLuos#:"tZi'AE[P)%nIqB?(`_%,jg?YT5J<<l"!2hi1D#$+s;Tucseu:i=p84-h@/!`.)qcZMAG<"ZnmpFk=Oa\1Q`;msf`.7iTpLmQt9P2EQ]s>.#I:(&P8dTdg9p%fYnTF+$Z@>SaNSoTghQX:"Sd*gI>PUg@BA`ge\\(f[Xto`Z^\h)]*"0,#:-s5tb>rTMX<d<sjt\i:nsNA,)BQ*e?)#@^'82_/M:9%Vn%edr:e^Pl?9?mg1V"J.K+SqXCR(gLNQCij5Dq$8tmHTaj?:o@i(3Q?ZLKS*,i4"jL6_e2]uuln8<=[4I]8pUBO,Ff_?":&/Q/i%bh(;_Vt/nij,1@-r"n\D\;@Gkrd00kG;P&6%q;F>7AGI3o(1OVKF1g_0.GpUDbS3r_$&N?[f8YdFupY,mXOIL'Cg<(cBW7,VlaBK%gt;ZLPjsKa`]8*D'[0ouo5Q3+V9I+T>d_"/(TDT%'HacS<D&.;M7?s'I"QBZUYP*/S#pS348h[;224SA/*E]gpm<p'jGf)VLeXFh%gPR?19TGR4NXca!c,mGt:Qs1FW[lWdFX^?=fd(c2h(WCpkS#eqYsKE#oo8lc3`IeF*l6;EUZMh6LIns>lSVZn&ksOj.S$7J&'#^$%1I'ZSaOtO4GqJS=%YcIHf]Wh7.N_Ei]q5H3j%,NDJHk7u>iDtW+=9NL9WiVLP#P;4'IBE0g_%+oi9>i*WKYb1lAgD>)p-gc/P"%u%-6JcYPlfE5p]tB!rZcb$L`>H6CSrj/L!>0&?hU#<dVGG?nus=W*!;*5?PH]).sl6g+<Oh!&XC\"N(2h]dHG96?!jHr:+@Y(8h4qI%^)Y2,VIG]k.@t>LQK36HZHbr*T8h89r#"V+C&Rek`\//ddFS!/]F`s4,OjVXGk[l%[I2f$YbgaAI"f7R\<"A4lI`T[*f`J%QCXpb%ro/*Fj&-Q[(M%[AQM\k"kIAm;fD`f1;b3>M?t':;<+akO.?&m&<ds\U_\5!7ZRLNO&@l:LVEGu\be*d:R"d[cc'0'2!N.J0Wi/cf%PAj=s9C>sTAJ/m'@;/m\)9<n5p\E!Igll](31/\]'8nV/&[mncFH2sVb"Y'h*Us)1+CnR]pr.eHd1\dZeDI%*L3k`Y2C\h,XEhi`%J`3OjZmd]6(cj:rR4TTckWZI^^uN]WJR^TO4!Fs?FE9-D4H-jqc'@:fYi]o]U3ab6oSDt0B#C,(oOQZc'HD05o%6h.iA4YD"cAL^%7NGT-]n,3=NB3(M-ZDtt&6!219Gc-6Ku%!>=ii*;'CfV]]&ZuL1fAqqP#9@7V2+GM210nGaA]][T=SKQ0SKt7,D5`?;^5rn(;s/+%U.PsNK#@>c'ff=;2(,No[,85mjA;)*):+4oL-$_+Gi7?bZ@GAFTqoP%[iiqeoe&'@!u#8K-n+kNB\)?cr*P=&-D`EbcIZX5D5/0G%RNq^sSX-V7P4A5m&)^F,g%llh+^RG!Cc_@r:"cm8<TZLs))He>'J4$,RC2CJES!]oJTM.c(??MQ)fsRhG'cACB!(3?@KB`!EBpR]%UCRhA.jVttfs-:<Zn'CbM1fS_liXBW[=c=gY8rkhHL7B4NjtK2=/5<_E+$(m0h]t#C+uoa@`5Fj;_9X8'hl,fZ(AI58^+-oLD)EG%X:(^g)P*Ef3MM#0i?U7\f5N5`$jRMd-PQ*;g\ihT6alml=OB=?i"2WE=B;DA`noJ>Fa2r5gd8l!F,C+/-h$`3o8>!R`a=l<RfX%>%qhJ_;'JLG2VSCqce5;kZag6R<+Q==(%s_mfAo<@Q,!#npS;P6]iYTg2W@cfEhStKrhD?B67<@s,_'q[Ta`hr^p9]Ci]L"?/Xu2fl%d.#]!,k-i=WGD_)UL=Q.7QFRlE$XJqJT5UW`2`(!erUHs+U3Z$4SI&8J`lqEJ7AMh=KeX^,oJBEC(20$hi`QG>q7*e!iQ#_mW0;#%.k-dtbX@^4Qc^%lYnt[@9FI]kFS38SFg^*X]aKf%jfK6L^Iimb]oW/0GOY7=iUXJ\mI5fk-rl/m^qnWTgUmFJKi_9`YC(u+:>DN`%pTls.\a]rfrIti,,jm;]/n5Q/Ef.G2qMs[_h[ZB7<&Bkb8G""0Tsr/uq(!q:n6;4a^DCXgEcF3*QqXQo]>s*Pj%Qm^Cjm?eMZ/!D%5\l<r00::5()RZKTYmjXaY%?ig`2ssJ$fW%VjDZcWPN!h;#XJM]T:S5&'+KL,$1l$jC7k=O_Juj^-:fi[C;'gdc`^U-m"Z3gI?"d%ckmSVX&&0]q9.$"-!QCXYq_kE`a``2KR%k4*k;C'T*)R3,D=mHleJ$mPR7`bi9/^O4&fn3?t`kqBX-J1>SRf4TCR4D#O0t9QYo&%%p[`8og-+(>@3";8Kd2d\<Q]1/?I3Ps-ZjMM-,+#=PIp?`06Jg6@b7DeY1ck*F!!QXoQnnti]nMDC'Ea5r*8k9L8-,q=l>t<hGGX%%2]<WA>n>-tI2P8aIU8L#])NQGnW+g?U:+4QkY'po_Q;/=<j*6`0Q&`5I[k612(j!1U/jgkQi"B"RH!7h;58]UFt@FWBOYcCmbo^7%gh<eZ+B/])F4?)p=>qa;WU2unn%u##U%7'CR5VW$`>W;nUX0?b[NebPj+]:=.mLL@nYQKJN=GR=IGX@(BVQBU]=L"^Npe0a(rrX>%KT`ICG#f^*c_W]3@,Lm``h$\hn867Vd8B:%f-nUKghbtDf\8/sZork0M>,#LSsB7Y5De'm;59>W;5*"?R#SM>P6U$!EMG6q,I#e3%4YpnrZdOfu)F`/=S(6QBJk;_o/PeJDc^?WDGSM^GRiCBWX5!M(cd%CFH##6;TmE-<1EG^Ta;t7*NL$3N/"/o5l'q#\"t.bGfroYC%5M<-Op@2<TN@%0l7Si;^ca;(haK$7o1*-oi(cN@[-m22Il!GdfB)+p^S$UU9URa/VoXlR'9H-,)s,;PEUBnp8Afh,louYP(\C'@#%b=SOnEuR#`;t&:3)g-G/:D5[*-=_HT$$X6Zg:5Ood+1qSe\>bLkhXG]6u<X_Mmh;#YP^F:C\1U$(!77b)D)2C*N$hFUINYD49TS/%9ZR";H#lk;C%Nht4?).!`f6SGG/#i)ZQO/8jjB.^jlQKl[*bS;o7!&aH7HRm:J+*9\iaZ.hMRfse'#>M=NBI.ck^K*(%pf,9d&gV%7nKK#c"U1idq$J)BMj:LJa:dGomGZoo2<:e7#gVqofGl[fEfnp^XIX;URq5#c$.sA<+q)1[8E7q#fN!)5's@tZ_;YBGSXaM9l[0<%Dn5c\-B70#je/KupucNB5\ZD)'A^qJO0tc[%d^+=*hh!&I%q"ok'j(+6]E.tFcEu/_YGQr1ijO8)auS$`qhRJ07W"oUUf-C'.na^%E5+SlG^H3U)96Pfqedi=BUQN(mC8p^reU!`F73U&ZtKs/ZJ!te6AEsla]l\hPdBOaneSZF*JJdk(JYI8&q3&@i#d!Va]0s*p,4Ro%FH.#(Dt30Y'STK[YE[_lA`::-^G:05.U3e)V^?=(K>R<;QCC4bi-e_;3BZu']o<E/m[p`R>K"dIBC7$nCIFA%_VM>@T=ic/Zl%fR%mQNrtZaV=!YO-GgkUhPAj-fBe;(e;cI3C^h-(iH=IL4?p%t9_O:J'O@lTN<32ZGrm]\MpDc/'KKYDLl<akPFP)"o&le[ISq28*Jq%9fb0-]!Wh"G$ZY1Dm..?bKV81Lp`#tfsfHgq7>T")dgWI`c'ljK:BR@oYL=)1q@SoqMriL`/lP1X_H\Uh;R)H!I:`BIB_^XmVM7R%bP5qupCt\@+.)7s*Q3?OJa?_CMYjt%nm>81'iD>jOgfBF-k%J9KR+[*O$&qG<dp2>7\Ucc/B6_?kWsg]/r5b67d6Vp\1'S*ZXNK"%W"]WuG-P/**!aiGf-<mMh`O'c9pE$*[Cd71`Sr9XG&Bg`7t0?VS>HM&8;=dL@;uMafCu?jH>c6`q^imnJX^3rlsq_*`-T'FmI">7%R':X\aq8E&'Q`<Eg%_K&PB@Cq)iZ`Cbo>K?F<[TA$C.*tV.SWJa,1_ooBp>AXO/tb7]W4>f4\f0#Ou;=Zf=V(0MraJl2Vg9s#etE%NE1BEn8<RJ7Ut')C89hBRi'`Cqp6l!@)+[a7ZfNaA;;Pm7UqEJ?)'$5#/GZ/Zr&A9Qo5;76cZ9*),!Q@@mtbBjh5r7^lOk7(\j+o%[8Aar9s^1-ZauD.dcU'7`Uf&+EdP<d](XB@`h#pFeJRm`OE-"X81+^Dc,CqlDWt2685e>n/5khQ?550o7u.P*XLdC%`Sdj8<.5m6%;4m-/7U"[>/MM])XuJT(_8X\2\d,nGoc^LrK'&-R*Y87$l28LVcl+bXC'F:."Hm6u(LlbPjXAf_hHll0*=r*_hK/V':.L'H5F07Y%o;'M<=4(;=QOh4[q@bt3''KmuT93W+":,*f)?;6:7+C0^jAR[Vi!1E9:8m2*;2?*48h%]$MXOHI*$d`_St_?r'8([e>-S;nrh8Ai%1:cB=0&3>aF*Wu^ih%aM)'ng/\Em/+q0S\.=kAKmF:%ifg^&\X,b"eWnbhbXE-k^=k7C`2Pm+;KmW*pI'\TOHd6a4siYB3QA'>SB%`QcE^O>hd'MPQ3J/.[$B!Kt#fJMkl;T($]ZoJD.E9`rQ%k=H35.%8@L)2;#MW_g:.+[*O[N0VDeCBUQH<B8YQ9\](JKcO4*)SiNR%FQYP,gLdLL#X/G[bDF7eM[tg%`F*YY/I.pajGWNQ_8qr`)8it1dFXA8gVm-^h]\aM-DN5*6(WK(>%g/*'F*NVG)qFtj*C<B8&qZG%VPt8,_*W-X.DWTbn'ZeM]o>k4i@p\@2hmU*-;H'IW+r-Y_7kc$\TQMeI[mQ&b>ee1pq_0cDD@K]ZX(N8SH]h/j>B5]Ajq$;'on9N%e)fO9'Rj`YM%Y/a-):!E[qZ@i":JPi-,*^eds\u6&`/H)8!?61?Q*om7T6$PHuH9^\LI>LNNHos;pp:fFcRefZ]3'-c`#--<DQW&%gCffYS^)/O.Q4b[CQ!70#&F6#mC!,JI`q&M92a^lI:Tcf.fFA(dXA%&9Y7)qS]g&0#/@W!)2g*4q;Z./eW-J1@/^;>q0K)BKe[k,%b.cpu#Q4]qgd,N*%;"LI.;.X:g&(3`rL+k+jm#m"fR(X8YVq=%.,&//M?U2jHC3s5O%sYZ$MQ3;-+RMlc]@qo;)8ghN>Yp[%CubA%1Gqfd`\Z8%]E0"upZ@oFAIZp]NY`:l%?4LECnf[2a!W?QZs94jkU[kM>q*F_*]gK5a(ba`Z07!q_0U)V9s7<f(:>@iPNTMd6NnHP%7+1Uk9>SPYfkVj#/0eeVN45bM_*m,J*(bn[85iN.A+WXj0Ho4#<M>EKo2S:[TNQHpJ;I/kHCbQ#jueS7q(Q"q?Zg.m_mN%5VHZ\+%!"H>(`Tq:a!+0l6!'$5;9uf1%loG,,\%e;S9#iI7l8.Q^H)BoNGtV)`?hgY&"0"I1*G&'C,W!9W6mbD::\Etm.=REn.go`:ZG]JV%*h^U\=:6a$%C">.%UXnP(O5rc-k*l/9r)Z2m8A$fZao<g6Xm#fkT<sKH+#2*c!HeOM5%d\6Xm6^77.a!Kg]N;C4I<_6]:*pDGHb&%2\[]4f9PuhYc?RC#dn\CVGi&u;?PA9WFgGuQcE?(QP5El>)L%Ih?Uh/\'t$78V)`4k/^G-_dg!`=To6#GF?-`k$k?#V5(S*O1@"X%=7:1H9HtsHN`XVriH`9<&NuHYZ/LA$_T2LiOQ2Q@h$?Nk>#'=QoocrCpK<.&(=,LklK6.\Qc6A[La@7\pHA*K&PP+&FG)`\<=-Gq%hX+S!F7';f\rFu8/2$<jB>VgnFL3!Xm67?)ARR.f<k""@hV.(O@aS0f4nIshh$](D.OO%[YMjl'HI4\*mBidc:A%U`R@1e>8DEG#%=QisdAIC(R,><e[,<DR@QFI:.k4;d.ic84`J!JlP1N?Yq?nJ,\)V%/gnfma[(>njGh70Vnn-YY`p3b6MUF.9)Nq<6^D'oaj.bJVq%V`_uBd(sl-rN\ET0g"DO@3P]%;Ii)e'2^T8(Xl5<,eCpB3f8Z`AVQ+A1a<IOrTuWog>1OuojSoR^+t%mk2L'C'h,_RY!UOgWg"mg%d?W<I*5idoU'90J]_-oPhWT(u\/m"S`4e/MnQ>MO("X,HM=oZObNCR`cZ&)ikjfR1"8jK&q$pLtd/;:"`/mJt]Hpc3+S5C$7U>5G%PDO6fF&bW3lK2Wu)/",BB1c^>#(A9^HY::I>8(/gZWF)A.I.5`@W%.//BpcGb:k=uCKdJ[;[R#=O&OWdZkbJ6>gKDs&>U'tJQdEk%DHi0mI@LU:5'NG\.U.h6Rd>aQc"_d1(Oe;ZDP$d-_VZk7qFfWPQ^@J4`cA*(;YakPh%3Sp#_-chK8%HKkO7<Ic1j>CZ0(35>';W"%Nt^[+^,Ki3+N!e2<n&SHX)U:se(rAs0*DV,DMD3K%Jd[kisk;I6>.\*>u6D40h3^fN]^'r<]!tV)WN9s%)\#?5lD<iqkX<>APOgQ%hiP(HMQU,UPG,9^=1?m:UU=rQCMa*W`'Q9EnsE$;BJ/bD9<'=lq&XVJk*de*k&e0eR:?@jI(%3k[kUI.qaO,c/^7Enf^"_q2l;=p%OChq3Ah<DGSpd%WU).*?`Gfp)f!\DCiRYjobT`rD:t];KC^IAdk0>/%7_iI[Wu$133`o:Ja^T0_XGh'H7\E`fJ"1ZHacqLb=^5K-%*q@G5'4Tcs?4G;Mc2idHErK5/h)/P4>Fep-P28BMWSAIuP`7fh>b:W`crk_BBg%3:pRqssHI)[e?AB&^8YadfcHKL3;'.i7%m&6F%E&A^udmgSI*QRiTj?mSI6-"<[Y2Vf]m6PCD/\$lQS[A\C[8:/^LX*INp(Uhc&)H$XeTfFqa^S6l3fTSSc@ZT\g"(pRCQNAkp1@q%%@VQ!`mKrNlGaF@G]r4kQL>/Un8,cC[`ME>W/85Oi=OM6)L<9OPRbitYKl"lUchJPS>(_griM?(NdJA_9kT8',>SbUmNpQ9mB7(J[%g"Bdo)]tAQCcpl#O3\LtH+Q7Q5_$1b'/f->Z0.mQk/sDkL+[O.:G+`,3G5_]V6&,dRTU-T3)H.b$J_MU+;i--NBt^FX,Ti/##T&7%e5r?;4`+>CgFd-aDH]]SKb]5jal)NoWl>mGh9>OC)C`eRg!-&M[lJD(W?hV)KeWidRbEWB:mK%iJbKk%<12;?l_#O5F]p7><Uk)d%\L#K9&pc:?1iY9fDSDR/:bLa:>+n!RouQj"K9V<!8bk(ceX<i)&3/L=<_ZHqY`sD511k"c'<=mY@V7Le!`M')]cU?k\i)deQ^NgB%]Mgo(Wr@7haH+Zn/$7#W-(?s3fW`eM%=H^K#6+PC^dZ_"rp4L[Sbqs1"D1cWO&)[i>S%ctlZB)L`kc6fbdu8q=fbSjNPE_I&2QPa%=9;rXHiFfb)-m\\>/`-$0W?dKqP`Y'FT[*:&MI@pG1u&E3pMm%hU9DN:03-h"WDu&kkU$9[qNCb5AC[]4XT^P#^b$jmHS;rZWRGn%G*-!FX#QIP2PF!PV92--Em)\RgrYA+b[]qtB"M:[0W<$R.6&=5(JKA\XJGRVeJ'!(S-o`RAj%9':;!kfjnG(\HEYuaaiDm3aDEXL%D4M'6/IY&obUM4*aQ][a\OVkjMm56+p/Q=Ji`.Cpn7)`!4"J4*\Cp*tLmEhF]R!)'!a)(rM@ud7@.+tGeKmt>W@t96Z0IJfRr!:'%$TL/uaB2TC4)p.ak`S,Qa8T&9s2?T^ld3`FO0D)c2(Q)uG/h/]5U/YApoMGhUQm\lWk@4R>$3)&L)0BL>B`&N6X*;1U[o6`R]WZR%!B2jKH*FPDWi^d-Jf5LO4[8`)ft-?+Em?tT_$eO0P9!dt7-9p!dBUhFS(`i`@?utF>-V<.,\A[\ABEd#7!#iZh6eYRN_M*<Po\P?%)k(\:,<9Xk3Aua7[]#<DpsmWY/f8jAgA9>OCc"4dTaH6kjsDG`psnn]S@PQ%]n$GKf9llCi`E>+>?[H[+W@nl2d8euClgs=kf?k"%%?oB(&')X5=NRGcg)k4kpgZtm_p)COK1F_.rSa'N:gM-acGDnjNW*m4neSU;17XC2C?iaFJj15n%E/GuT5T2A>Kn6b(O)*i`3&(D%NVA47M%[$>IlNdg8)0R3iUjFCfs+<FDR]nsHJ%.l7d\hT&lkbU*[\Or".Mh\RGj"JU=ST.r3_.j.r/Lg>K<%kp@[4oGXFMOiPkJ'%L$(mOKD@6,cdE'!Rben)bm$)q[M6tI#-a6'1[Hc\bHUndi7BX"nl*pSJGQTPZdUii&Spom&lc!MWi!nM5;k%4J<$%d-L]7%MbA$L%70f\!Na)e?&IfT/A%)je8?]OpeWqAZKeC5B@bosg/A/k0UM6-b=l7JXR'DR(VUnFUUG\bXl?-5(R8%':>Ci5gUc(08bT.N?!q=f&%4]6d3dj+P;3]p<4Ib*M@.W1!lifT,`=c5d"e?_47Kj*'dOUBr\cGDj4^"3\ZqI"kV"AN1Sa9[n51Afd:pc;`,)<tJc%-cEu?/]#m%ZM+-#iJco1rN:*4lRfLUZgf5[/m#48$HL+.]!pI/=)s"adjk82=#`SGQnu'1[!u6j-;?mQ-Tc?9D]l;u7!K/*2A]PAl%!MFe^(Z;%NM6LY1/p/Sic+#g@_*]"$Qh""hWWn9k26Nc.QT5Enqb\ZVmKq%goNptI0LK\$WJl77b`R<Z57Ij%tjR4.F>9,PE6a]g5Ym('1`l;%lLl=gM=+d9l5/MN^O*M7#@BPODZ<Ep!EU(6ZKMc=^W(uKrHFEB8,L2B^<941UigkP)EE>Y4Ocmc+sQMQf(be1G.36Snl2`tS%#eR%oki]2k'OE)YhQ7lKM3?(BsgYR9l+P!U?4W*?EB[Qgi;pT+fVouW88<uH_%->31[CFqq8gim.0Y'CK0K`#-"JBNGA%S*WGVjbZqq%%<mGS)Jn^uHjgf!b@H[HHgpP?ED-Ac"'f*?i[JBS]Nj_V#F['^hDU#s9Zl3Y,8!f!T]Ens(KKF^fQnR<tj/Cc/Q>BM1CDAZP2p_6S%%Vd!0?GAYYed5iX@mo"e`N99V\dd1^GAM2<X5dS@G5=0:Yf9LGY>JTZ[:c;q/lkR?F_Deq=`8@mhC72!/[fgD=F+7g-97hRc,Weg%f.L3=P$:<^GHncj*cFT^bqEPXB:D<7_QIeXI'QBhB0&5/]Phu87\#K7+%pHrT\JTHnS;X6/Y>8Qq0EY0:L[+[i5BCo*@IMdeFYBT%9t-'&AoV`M,<:9fiR[6fk:f*DMV`GE3^MSJ=bAZ(OY>ORSrXZDF@Nid6VI<A]]hD[-u7B^rn(uBF@K857L3/>Rr5bWGu8K@UN7?b%=0Br?c:I]UanolEVDIe>F(F%3O>i_mY+9042aO*J]]kAe(ZuQ=X#HUFWTZCVl&:#SN2+Y$i_??>dTg>C[<U.<0rIL0hUT:'N95%B%_pk^CFP<b3\p]'6hK6cMjgr.i*(+NgD`V`8dQ/Ne>n(8$Hd`iQUR5[H?IkUkVugE?Ytf3u,@<K@VmK3;3ht.:/Z5rcD`TuEFZnT'%egD^.ntrbJ?e473B*8Ws)df'nSImQcPP6q[di%u0RH<I5>l`)B;ur*,0=Do,0r$"Z]%e88*M8j"$`;0'i@\0P=/YMM-$QV9^,f3\%_ASk[1Y_3RAE#!94ScA;^n%3Mc9]:nle/pLg+M'iY%oWVXg6,a&#PZY'&$\hV\WI]<a@I8UbJPt(2uks:,8)^8ZYk<mIYTj.hNfd%-),Z@CE(M<bEc_-kg$0RR]3uR)X#6\9>4Z"41"9oRRD?m%S_qOB'.4saH:?LdBelb%3u]^F6=[hN2<#,ZSZlL)F^1[DFoll]ggBr%d@C@i6k7oTC$r4oRn]V=7u'TJ?e@+SZf=#Ha(t=R(`fg%6jX<>%DFsFNbgEeI[YQ5B.i!MC_(CP'?tdO:'9t/Oj9*VYKLG9@;')f%iS;2phCHj=&K*h]km3InB%Z\"$d.CaB=6,)`.g$-mfCu:ZAr5'2&,=hbXO\\e/A\cr9LYC_S6%#iu!CB,)adcg^*gbeo2=TlEL[$%:1iBl4UuPF)V(QcG!S9lY!>n.]I1=BVm*if4/pGlA$&AD/0/N@AFH$um?_X1QD@H7=[WFHarKq<p(d[Z@pcP!&M`>>/lPSQ%u`bf%POI&MLAGfe8/Ij8=AW3niat*uF-\&oH)BB"08&6N3\qW0>!"K!?2Ji`Kb@CTHThX7Ag_OLQ<'Q7e?aIc!)h.Cfr@VA3aJ>q"V^Fi%(5TXK_]gJ@M"d?FL?P&=,D-X=r9>0fLju7HNk:"3Tj`\f-1b.jR,Q?-o5U%,W;%/5Be(^cj1q;.=f/i3rJ=XR]TnhWAVN:K?]kNk%OJO_f=lk!a*-Z_L>).hJ3e?#;qe7XB>uj-6$TcjrRne?>?-XF*`Qa[RUoU)JZ?>XgB:b/2_/^<KF+rp_7[p68&b0WgNjZWDL/-m:%R!h-[ET-Ob9GGOkrS-LoCDKU1Vc\*kDG9ZA2;g$.CV>9Zd;.,Hh+ldnls4Z"NLZBc?-JEMP@fn.)s*Vo'qH.^2l>F0:C$$62I\aR%Q)M!,#HQ9='!?R+fmQH&no_U,'9f[**p6;*fP).3%'`=f,&U)_N+$KWcPX);fP=k85-BV:cHL*6%mbMI0I*,u4$+1AVYjP3ZF8+Z%!3rs-\@*`]TrAgi@>\K7oq\R-dPSGkX7Ot8-L8"3DL(q^ch9Q*W(T#cU"[@dq7*F5d6[\P@+ZNkK9OE%/5<UQMr%=B!PWt@i5bTf%Fm'=B_aiY;=2`sDiTNjZ>FE,E?2*QJ`\hTq&NsWQI;3$9&;Af%122q?GFL[krc$oN>M.^;09DG_/i>IgQ\WgJ]3_T/@$TmB9/LK"%Xo6E>fsSq('3dQXd;.L<d>h3J[_fFAGG4\cRr!Mq.KS&rrZ1oQpQ^m+r8E%c:3\B%!q<ofk8`rFQPT5-J*KS6YPQ\*R1gY)DFjOW%X[h.lB&72Ypi^<(kcX8HIMt'NH/GpqYa$0aaf]?Qj2p\>gU'iPiH+4;\*QH+b%]E-HpoF"=+'6(27%4!mUarkR$L\L.hc,O0BN(P%gD]+E'^t6D#qdu/GobAU1c!oOhE&%[GEpk6S007"SO9_TmPKaG@ckIFdSW?5Mqs7c`FP_eZ,hf8?s7-q-'uZH;[]!oR6*<,->UcJ%;R/oH_WtSMBTaE0etuHE;l@sc;HhGSb/+2'YES]^E!<VWct#sn3Pd*AU"@0A@m2,NKXNf':;-)XXgGJ$`Au9]Z=`]t7QQ,rRHo\G%l]PqD21tU8hDSD-Xpfnj^6Ebl`3MC%apWou2<4KO_5T9slVtEK\p<I^'&h3R\TN0LV`]s#\OhcjrE+=c@A(FAd,`8oJ[j:`$ZJ+[%->tsQ?@Xp7470.Ob)?%Qfh!c,9.MSaqD#,"LcBmmduo1HnD"n8Bi`e2,IaD:cCt>$n:PXsSsfnr!p^?noQ=>FC%_C!<-DH$l*Mqt%WKBBHN*a?aN#sd=`2c@tS"]peb`PSkcXMU8Cam7]#>=nq[2+U?^irA^^O2s(iuC&:`\h&]eXbd.H?iRW/\O)ajlEMm/6i5C;B"<7%T5sN%SJp6Dl8V7fZ%H:qc7?6GU,1t<CK6dnXKi,MCjgT!%oRUl\JiD&oB@e-0aicD3Hnn!mZ9\M=YE%<5(F.'OI/(b3>4R#Xj`hc%!BTlSeE`;7o)dt\>PS8>&It/s!d*]0#kP@7(EeJ_Q4g(G%X(]&5c6erBO4a/!d*]0k]-e9LLFRacNpJ.]VH@:EL5g9!4h^D>N8S_%,:T86N,5O@j\s4j4-T7"[0jYr.A(`P[WNnX".p/E#%\68q-9M:Y&O>2q=Ik#hij;N1dCP7PO^`T?b''45$k8iSWZ_!mi_^oSSPGu%<kjo06d`PqX*SeHbNn=:2Uq#;rR@OC+Z>R!?GD3\Pa9V\Vjm98`.g%ilY!=716f_DaQmIq6e8N9QHAH*O3-_/lXt&P_DG>pk4Q(Q%jRUsfPai*UelhrVSja@)k'?p,LSi='\U7^J*ldNe!+MJMc[%kJ(95R>op_R#5-*T3rfmtWJ!e3,?7N.NFlY3uorXb9cYB5e^P5e?%Ok7o_/\FUW.]^42etT=0(%a8,rT:aQ1g0cXb/`[f\qFqknN"n\B:[Rk:&4R9f!W#Xf&Jl(K#*"qc6IJr]RKIR-D/hLbKd=i?9dbW%IXKABL##[F*"k&gMr2-IaQmK0ePF"lAoPFo?9`4XCXjYP[CgsGs-DW2[;i@8cg,3Q5esXIjRok)lF3@4I!2F*:@n"X(<&Yca1&Y;%K6^M4`On4ToD2T3&K=s//tU\@3dD+A\QV@,5Ee7#B(]Ba/'Z'g)?Z(m,hfdNg#ht65&]$5i`mY1T*F"j+dSJ=a1%_(L1ricQ%S>j%=oDCHa6-!Z[Y`ipT@\"T<.&a.W@R-(j37YfZhe+$dMh]Q0iogaXF:P(V(K[K(uj0\H2Yta"]G#N;4Ef_I]N=Y3m6jP/0EcLH2XhN%qCS(qDb2Te/[_+llaMI%4J1/"Bk>8rIe,a!Hr`J<-teJ#os6RFddCSfkOl/>FOFnoQd=u1jGTmmm?VbNSG54o]REN>/[Z.ram8+p%Y$<9VT0g$rZhc7h4fH]mB8$q&#*9SkqH5V/=F+7??9]f!o'1N!1kV=AlDNgcQHe`.D%Fj4j/_>8EsAmLoD5FBBlnl8mTmG,?9dc#%_8;+ON=N4<hj<M$)Y#V)*f]RqEu#k/\5Me)R0Zj[CA5m*N5]hG2S@YP/S_M(6ubm`]g7j';,imq7cb@%n2hn='2Vr,R[\pRKdWpY%IeG6-_-cQeWd>SNArlLllIWGNHa$YiKts=\(:^ngNnp;)^lB?J613Qqg8@$Fs-4,]*W2]8ftFFUi26B7'[#O@Lf"'XAVA4rAP&g/%]-fr<1*%!&l=[;V_OU8U5D8X"r$bmC7ao4K]mD-^:-RQh4(6hVmU#U"_QV=W=*P#-qLn%_k.1!PErRc)?:Cd/>P*AGGWYS)NlU1#%A3>,UmYtl=i,1Z(9mJ+uaW4apY,3lgBt>8KG&$3JZh4.Rh=JO>gV;dZ^Xu<Koa7:KlfumCkI5)F1EALIDY;_TH7ZaNhYOf:Ac9j%%dQItu@V9V(8r25+^2e;T&[pd2H?M$]e8h.8d!<J,V3;4qPFf9OKgq"o!D2kgAdTm#b/=iFAj=.:p;I8H3=?!a`sNlIpOR.&pJ@e&%NXJ28]mV/*cd2HOXd;E`4BL@G]n;qt?pAf--q#PgDX^61'ZtXA=.J=^jSa-[W*<'Ojg1^J1iHaO[rOi7G97k9diGnNHPU[JgnDgW%*VeEUgtSZ)`#\Ij*l>6.GMmN5%,>aHi'kp3b""P]i9>[7mJkj+,AmFU(et;@T\9eSh:reE7<,N`D+6o1ea)2NM0k35bJg\`Q;1BB%l?X][5<]S(e_L`Ol\3FSAf-"<h+m^BK&@).n1>2?0>74FrTK0.O/2)hhu*ksD1LJT]HQ'&/OU\N`+TmA$;AY1n"6ruM:[H/Is<`j%+9231N2XNK9fmZ_oVjM=&KL-B\/3EWikEUR?55im/#i#WRq",:&bQ=e]fu#R`OVq[GX3#*km<L;^0c;c[LBKL/I&aeco/#(=q;j&%#Q8<dHO?El[X?NpjD0KV>`&56R_*^;gP\G,mT7UVU1]`6'_*Ch>:qU:;+(aiLmjp2&4&?I;gWL*!R5WrDnP<-(0BfLP7tKON(-RG%^SC#I)[-/Blk[5CTE`8]+jr>I_=FJ3nqJJTnIR0=Rb=7Ua'eYMOtF_g30Hi=CA%Rh(L3C#b')[+1aAE0osm1Xf#Xd>Y0hHX\kK$%%Q,?o'VH!$2e<FWGpEIU`4I-p8:^VM\'lU3\Q[HKu/W*koAkX(gP=Mh-GmHYL6pOHVd-Y\'U4)?6&6gN)+1cb4$-sQ)]h#qEe0QqU%X_&8SBm798ItifaLgTkuWjH%)GgW:oc^&tpY)_Ef8(N.YB68%(m.FM&,<IS90,5cE@A^q%Qi21-@I(aF59<&anFduB3TTgk$b2(-%mT6r%H1a<A_dX.o')(>WR\68XZf[^KY%Vf2,*bKU!ORm]K8c,3HH4f#H<L^Z>B3MMB_:>[gi9t>0ij,RHGC'p1`K-%JQ?O0$`lEn%AmTD1Xko!Yqho<:`UZ[b&U.@dSchjpil?`;Lr#FRN%#f1MZaNQGI?GbGJ4/6epE,-k+EoQ[d0QeaI*Q7%cISk-_"O,5.pS""#.Kf%.U,4dfnf$g][069A";[=C.D_eF1Wg5\^NDA?(O@Rip284@VaJm@\dK4fLPo970A&`0a>kgG<)cks$;a]1C(F%OHHA14R-WV9'^@`%.b-]mU\V7_a_u"W;35"eeF+I%UZ?WsbJ1ZS-fP$cX8':Mp*>oDbu/Y]>X&%EXZXM6m/LsZ4i=p3J+m&OK]C9dr\q<,ndC;0+1Z&.%eNLark*(R`Y90m9&-/ek*ih>=I'm[&IBV(fHF+5$T0a7:@^CliN>NZ.f0#_0QLt%CFb!Z3,KNHmPk8/F@'/<<mF6UFRdLA`"Y0nN%@HPhMO\t"B%W0R`@i1-VM+2]`M'JlhU'[c\^tgH%rEO\OKd2)7WinAqr3p&%B9DU_EZ_[>08F9#rR>,K44/L%#+^W[h1\n[Z*WYY%FH=r)c_StFF^(Mjq\i\lq,KmA2\/J1.I#)!6@7HW^V9-h8*_I@KN\CsL1Yp*6ka\b?L-r&PS+)U`KE"RmV"c3NF.rYRU4R$!XPt:%FjO<!g_L/&*)0d\@f%n'S.O:06V$o^UgKp?_[Q@Dggj>cis]Ap=T;67D`>!V3H51^=;F8DNAH6eV(X<!`Q+b22a]-_bt^)sj(@L7%o7:N;.a+p/=.CF/4*h#;BHOEX4@?&YIh?T0/'j;0.hg.RUJOh=:_M+qiJ,CF=Cmr`r@H;P`R$F^HI3.4c]utIQ1.%Se#UNA/E"?i%=f`oE?<=sq\]?@92R4]D"L/'-4+m>%a/nn[]tCJL'jf)[eImn]>?F6)e<G2!6G(4u);nFaX<e#i/2BkVq">7\m!"5M,/Iq9m/sV+%08YSe`68T07"JG^W^RKA/Q2dD(8MN-Z;O6Xnor6bLb^HDJQ!(s,!.6IUd-SbAB8LE%$I'""j1!>4[-8$Gs@`0e;%jsRIS[m7$QSF%0$u<=YFpmsq8MXd<R-'6C'(4`T`I_^C<XO1!(_L79;'uR0_n!+i43Uh#)jl.\`7'ioT^EGMJi>l/rn!LOY87[@TB]VDoO"Ofu),u%Z*VlTd.%N:W:2d^Ns\sMc!>B*e=V>$*g:T^YCkS2J!oRiV9,hdSfQ4uDP:^B)-2O(G93P)DME,+[;ttGXl*(rZ&M^;do93!WU\](%fJSMJL:(KHOISmMWWal)=ob_Bb-Qop9L)\25=/oG*P4F%ZQj_4&"M(5NV_,mah$AsEdD)%HKk4&\$^YW,W7Sk<V/TdldW;!QM;=J%K+Z$mXMDOK("3<GOEg"AVO,"[j3J9%3C;l)i&_FQphI5"nE/=S)F:#_JeE[X(&,`2brtcFO!.u9L*7=,Sq#4NGg]9=7Q5%VmIO9'%ibZmDkR3pW3=n<5UFc\%N9Ki25_)CH0+8-?+Gk$A*sDp'S44L8,q:$^i'Dm>UHM8=*rOXkTp\&BJIm7rM((%fq"(9rjr:.j#bP*.%TN8.E&6?(9hE?g^#nY+1`hP=P31Qrq,;Ze9"F"\Q\>'&_h?"314UZo%'+[MQO[oWaa6'D3*]U:=U]R'?KN@%%/6)l!TYR`:lh(8L%U9ES@B>n;lNcc'RY"HkeE4fQ@_n["#r*JX`kUOLFS2"d#UQis.!)iLF7TDFHJ8ouB(O(L3<]@%O0f6!4.)1rqSjobYR#>#Z,3<o)%/m;cN5/>m])2:8YSIPTW=$a"a1XoCn3Q7<%.j3B]pWPo,AF5jd0m)0&dW3MMD^s6lf''/7#dr,N>B@UZUu5"#l`F!/Y%^S[)Qt@h%Z6BNVfFU%_ZN<ff[[CKL*,Bps<h#W![ggG%3+c=4@(+d0D2d9XN\.f,2.i<fqOke^>q]B`Pu^#Ii)@$`=LO**a4"b2,I[m+eQ.(`%B=@/e4JJ`ldp)k_Pi=$FLm+fI+Ade[_DoKtIdPY?6)da+J\'70*4uWpM\C,[Li."%Y+0f&N(cF@OnNk;n(oVX2m$m2Qk2W.0g=k]%@dU/.5sD\Lq0R,bGql*bOS@Y^,b\E:8YCAncJctV0s?QX#b5$C]cD?5`!eqo&SX`!B^YTT6oeGoQliGMJ;KQ&\5?M+CArkQ\>@fg%^FC4/S4):o2FK+`[o"ZF=AmsdVs!5Or#l^HU8c)uI\rLIh:W_emKn*lfQ%&bS+0gcZVu1K1i<BZf\WJ^qee?</HrR6+RtXqO]!\i%.d,]/9O)k:.3@>Wog&GmrC.;j6/38[?k@gm*@d/&9Zs;Q0:KM@SgQ/Pm/q`".MX#!20F;gZY"*Ip=AN-&g((.4[5F!1mWc92=;3^%m`r2a?P7u)Im+q)^,W"P,?n<#U`6D1agl>85s(P*`Zs;SV$n`s!A$5E6e'SS5YA+(ZZV"C#9g'G(XD4nF7\Q2!K>sk:'jgBL8,$N%eI;qf.WC0B,YimZ[9G^hC_&JP2cg73S[UD.QP[t=npet"V74-5(:mJ&md**NiW2>q\u.egMJl.!kp$QsSci0T9TZX/M?S%W.HF2g%+7:;r.Z(+"G:(!e*6)u)5I%YFR"?,O;!%%9YJ$,J('^KpV]QcZoPft4U[mK8)!ON!pW?!Fr)&Jr0<U13p%<m^?`H?F2<fDOc%tc`%G"o%R:C<c'8P,aTV^/p%Dm<@Ba_5G:S3@ub^8iZ\+/P4_rOCRFI#j,/F=19S6h=4"M:Is^"0q7`#0M/a2))4Y6GnWGU>h5Fl1NFU%+KS<6URmJfJZ/I9;:1f@k+cO4o.RJBNuZ8]muD:SDP'/NE;R6(6#G0R#G`J6$lUR'3pJLC?:9HpKJYPFO*oT-L)$/d$1NCk<J7-u%<J2RCrSs8P]pMnXMaFDi#a?&5][!C9.AMEJr*V'"<Z,)cL@BZ_;A"Q<8tIici[hCLAFSQk#r@BGF;H0+PAK0#DlhUb$lK%`GAnT.%+TIr!S]N,dqO4Cd;-oHgF"gJh?O@'I%k"DS._,$n]IP%%7=(Y+;HKU9PNb3j)Ue'QeW5/>MtPmhYYP9=W:-taN$p<lf"U]WBo]DU%>sSkZ?6n`G5^M?nN)6@_+#ZL=o]Rn2(_`?f;3K9s1BBgl=tcX+oH=9><!gsEBMD'IVG`KqR[<'Jh%[jfF]lL8ChTdjkW3K/$3V)"%,0f>T6<QGpCq]JGa&"E%Q!X?u)VA%[H$X`8I><)@a`i"CQ_#Q,6rLas1\u:[D9TgKH@1EIr-gQ8,Mf4/)/86-q/WWsj2+MhLiV"O%;E9(t-81h"4$2$Zi^9:gU-B`j$3L&m$k_um4ZK/r#'(Ck"5elh:h(K7Ig[:c<J)229tkg+jhJqMYcWVJk\/)8GeK`unhA89&8MV>%:I^l'&F>rJ:ID34#c>^i)R?t7%C)cQLprnP+dp;`#brN\:I\,Gn@=p-)M3.Eb`NJHZ)/WhDm^[/O!2PV=3R2dJ2.,Hd'4U0_^`+)%]:[<\nfR%GV==SX(D&5R3[AM@i4C"oI+om&(`*i:_HbL-,?eNPAe\k%%u5=2)?L5qbYI&S\K/I5@%0$\VS]3e)ODSJr2>3Q68k;,%qb'iO0bd(&mdn<#fCONTMk2.<mVr@fRSOT;BN]bo0.D[BEPuLKi6ZL+(>\L.WecBT$W<t4T0S=f>lnWuPk:I/nb(7(*937WP<@f]%hD=n^"UXiP^sX@*oN"$hX.R#bF<",dc`Dt55"l<[\*V!a-Gj6fkoqAWDjr$tC-d"t;aN6X(k@ZM%UT#,,XsZjGI/jQ8YVc$VIH([%,P;UaX7#is0YU/BYF\H-OUNP=_P0H9J7Oa@/:ouIbR![H'>43qW9rg&"JfAE83k&O&bG"h&<Q[L_@hm.7r+j6q"OjDa9-K"0uucU%(6$UB"A9%l_8tCL1uLBaKd%5g/e]<V-G;#s.VoBEgko[iL7'YCKL/#HIXIja^T`u^O@hokq*#=!oRcJ-/sSJOZouIg2<?f:VEBRq%\Gh>BmDh&R\B:c=^Y[9*C.%=Ym=JML@#h"q[AdRh<4deT.<&mAoW:31D.'$&$g]ZI'r(N5>YtpD9^4`aTgDm%U#OJC.r76mq._-B%J)6dCJGpZtki="IL7:mU0btU`@&Ht!5\qi&B4c+)c;RioLg9)Z]b;fe[I<gKa1Gcr>Q9T:e8BX=[l;o)[qCe]TWL"qp90]fW_YiK%#40:7hHV!f`^1FM,<[:lc9_+dKJnU-&bam+eUYSFVj-bk75+)5c8U;WroYqmO/:mJq\gX3ILX]^rDk?`\@sER]U]9V(Os^u4n7d>%9%G\=dMi't!WYWRguqiP6sM(,(*g!5"$9&8$FoiIQMsij"U5qR0Pqi_!3oN6@nBo^3!u]hG6"Ak/j3+ZW*=?J@9R^s]s<@D?*'c<%&VIs9V^PcRAj]PL]5'iX$Uq(IStKh`/VN;blB^438j[=dr%O3GB2RXd/jogOBfG4Y@eV)MS\Q"s1D3QZ<,]G^X>LTB]:ZmhIE+SV%1ZfE!rkp7)(XsW\NB!E2JoFuK`<qeCfZ3)NcXmu\O<?_i9Hq=92P_fro[\>"J"dK+lo^ejpln%Zb+N$$lpd3]OgnXZni??<Kqmen%YMZ'.EI"X>*-\c6)IJoVYUF/M,W#&IMW.pR+MY4LLnipm(Jp=^0-oOrOcIY>S:s?NKhcV3%`0rI+U<ob5g9-e2$oG\YNcTc**%'f%4Qg0,ijbKa3@g"I0!15!Y"*\`kAe3Nbd:?cOcC5tSj5#F,2uudeAhH\E1@N(=Mt57Y?o;t_)lY<ME$F:q:HLD/h.DjW?F8:EEjOi%6I%@QbC1]iPd<#lBku33&J'M[5_GX^4m_V:(53(bjB@+K\K3a"\sq.rYD6i>Yq.Mg/^s:!-e+aidtO/)Q"=D"P#c'r?@Rp$(*1T8%EID#f"`,o8B103N#L])+?$=#jkZAUK.r/TtF=[g>Z%\P\JlFX%$dZ,OSKG!4ZFb&a5Y0,"?\9R/l^K*,./5JD-[DTe.1_8;9<!s4%96?'8T4S=mZQ6t:F:no<0![L1fuY4)RgJ&`pm"55;K7c)a/D`7;4Wo&6?Q&]!36ObfSHa,pt1r2m_Y@mY=!siKZU7H`#XM^d%iF.%X&9t.blm7UF%]\-[Bbm'L%BY^;ls"hS[-moGpt6(,A=?1S%J<m?3=fX"mhqrWt6(@>$N*fiZ`<\B$1c&T8'hnMk.=44mE\N?QM7c%EBK^@0pnQ0Bm9b7UZPV0`F_J#P#nF(iXndKbSn=LI_Ag97_op/]>7.*3j4njlf\h$e5dP0lUYsUEZ&cuOJ"0lG#pJ2.9!M,kM_Y\%BM*Di2q$>M=rW(3!F7-Fjm3qTX1]NNXEh6)QuN1'@Dk4C1;,%Z$)lkAp5qrqhV5-sXWl=+GACYAF&cc)Qhl/QkLX\TkWp(Jd(kcd%$Y,h:D9e><6C^pTi;FiD!@j)C3B0-_b._I'%2Vd#rFtD9K2>Y>"SZUJ3XNj>Uo[Ta`-Rt)Y_'<Y(M<Y9`:g%j^h./,<Na/MAJg_*%rTq'e1+[^"/#)!]+8P"e1XICFdV;93HKf%n]:IGC2l]>ekp%/QdLG@o7$sF^O)V=F"&sDE,Mf;%`^Bu#T1eSc&%%$dDk*h<$+8iY%ZG/gSX-I"6a2"aVA>:GIalYmlN._[@V(>ZhJuYT%[f"rk6^@#coK4A37FNVl8<VE$A:\gt5hs8\?PsOFK#2O+.TqJ;^e3;YZ\a6*%2WW^$'ZF)EZ7IK`,,`;9ME%^EIq#eqP%)Xh.,#_H5/`lt&M*V+9iE[_+L\CAaAM\fj[G]O!J?c9OCKKoJCV;t?<23uj^bX(S&)'J%%aZq7+_OXaV_ul,,#kIN@0TfH#pCb7S!Vu,7gJWtE"JiFU+lf!';I;JT8k*tp-E47*l'B;i5'gS#b1*m3=YB'G<Lr,6_t35,qYB'%-:P1cqi]!A"cdp&K]>`jC8@Q"54=<85L6!K3[`R6*-ARbLr4S\_Y*sJ>&P#jPd_qrZn)U#Eb6^p27/6rh=>/+%LA(5fm%3e'F,Q1%ho!@q%GC`ao.[e6On.KoN"=Kg7'!"UWj4]M:!gDuYFCXTB`gpBX.#_Ad*V'c4dK\.c8Dt,l*=YoF<qR@0<3M7/KZ.8jgIEsZs'G_%kt7*W>tG;Y[-*34<tbFi<Y7Q:G)eGe&5f?UR[P5&/2JfDTfCtBZp*sM3nj7?BU.f7^P@62)Hu7holmYob*i$^m#0q!2n#iR.%J4g%W2!XXIAq\@(rV_J?a/ji:.+n53AcXMJgKsEb._7Y!U//sfb\--Xik4VUKrq8QIs&;8[!Pd6.(rcdAX\a"Q_GX?"D.!LqAK)WJ9!Y%bTR#V0Mg]R1TEf/g+]NO']HtiKB4bk[QV``4[5Zr#2ILo@ESur>(qU:4rHERk=Q8Ml`5CbEH?f9Nm@74d<;tn>eR_p[kH&Wkf$[V%+7-aKA.#SLQc(FO%($"u*Lg_2r(@rA@6K+YcZ^F#FZOlZJ5@=#@L)?X$8540hA9V<S6lGt`c`0_>%7as.Io[<kqm/59>V$#/6?W]%:II5""8fs?(r-_a]e$sQZ,TVb!YFEJF_Ogsi%_t'n8jdU='7XreqYM;WL!s2j*0oNm]EKi"O@hP7u;SsUC&=dkVfq"Q1t,XLdel[%!@3G04',4/_[E40ZhP$qf3Sk9)/("(XCUgsp@-`cK_<DmU91iRW=)4[Bf):I*eU.f^P3tQi:*3C098$kZV04]^6?rlG./ss*mruj%q=_,PR?AB@ohZ>ba/TQ*[9[V`)LM]sHXXb=@%]c-Q)L691Gu)C<8eMmjX$M&W"[o_re3Z1&Sr*uW?'Q<OnN9T0Ko&qb5nmCZ%ms!%%rOng*dd77f;NT&^2L%mHWZbgiBn,>T$eh'*^S'AYrhU)k-.dE4`F6gjYW>c@\r9?R1q2Q?en0$XE9G\^W,DnW#bEBnM2iWbF'ck%W#JB[__F5C(<R$GK9:&HEsedCP(Adi5p@Nrk$1lkO?CsMdV,PlcROn!*]U1\V:).=LffE:ck\1RX]m%dA.'c`Q0&C2X%s3j\4EL@%;<>GA<c:J_0^60%Gr[i59;V>BR[6gWq="5rT@7=+7L('[R1Z@J;T<`jc2Gse(ct(T[D_=/RY?"rKZ'+6r%I:dT//"^/JfWW7V%1Y%mT;f80Mb5_o4j@L*>r"`Fh/G.RBoXqKoe:$:1'$C4AQ0!mMto`,*PtW=pQ!34:EG[;+)2b3GUsU#%!lK,Q`@5?8NiN<-hg\+Yb8f%r*G3dM>2HU9lSkkc]-CoW\?,H5OXmTXf;$XdbA]%oDiRhjmaPeX',ZPY*)-%N/n1lQ;3SKh%?r8)io8482C(\L@8N"jABIjARdUl%rRXIt>gWB*WUIUFj1r2OR[&%[1fTfcDK4Ug_OZN:kM5'T309ZGMpp%``M[otOktP0Y7\Z9W`+V!UV<YGqQgs0o[`9)7f!9gI%lk!%mh`8$UJch,*@+nt=?RDY:.APa7B)!#0,-M?SYT5.kDk(JRC>R#K1/R(4h[3b<qYMR;1V=?7sG6AQ=J%gYGFP$=GET+S5ee0^+tlA%eH-1O3H:iC'I(r;J,9ckORUM<*do7S8A<kf;E/E^+JSma?_pVP(EaU@m4PJc&$_5Q%S9k,DpjGZn.]JSb2JS&J;2"$EbLt)<f.e^%ifG]a3Gds"_3RpCG&F^VhM!?_c?n]4DTq3f="$R`H)EW/=@Y<c$CXE3VTot:a!$F.^3=t1MY;bUorUnO*"WW\&f4&rOcP-QFoVpi%Ykr0O:>Z=sd=Cu,),3[4]16/fDQ9i+7uopmEJ/tXU64:R+qDZ>D"el%A`dPj#mlX3Y+19c&28dK@QOpMU`7OBLl3j<:6+b4*EQBq%N]$;I-5=IiO<hU$Mt7u(P?4V)f";63^;'B_6Ri6_2XmcqOH2J=$KCoqNjZT_E[JL/%11_W*qJr\#'^&`o#jauQXA*G^J=UDWHTpA%^K_/or"oQhc'E$25'U!YQ6(UK-M[O^#ha8)0"(cDiA$j[G2$*Bl+W`jCpKXS=UD<BX`.N]k,$L+oGk1]8:JZk`HH8<lAeo<mL!H2%GfpDLdek'$!R8S*F78If#MhK9DscEu`C#nt(-_<=m)[c?'3pc6$^^ckUNhlj>Xeo3>@7IJ?9X6:L@Z;&dd%MuDS&@jDPh^j-.3CS%I*B.2q=Y<FX9SCN@`Y+?RN&/H"1>E9j`!gN#dq%:*<&AAW!<o&2t%9rG3qE0S\6MAO2kHE;@Mor"HE>R@G0Lq03P8RRoHBbdOge2%hdI4kUOo9>j.VKbJGg>2\YR&D,**$(it8%0L\oKsY=g.dpd&\IH=fQ4X=;3lk:bE;=$-:lDl1Ij>cY)(lRNlJCHXt69Sj#<q:?Ab%aFJM'0_+'rhc:6hA4ermcM2p;i&'Q=WD+N;]2)'^i8gH`99hn4s,6%nhSmfJXP")fn!n#Pe>u?k''M4rbu?EO)%X`1"H`s(HJ)B:%IMoC2)2LG.8<<MF4NDV5dmp'^+*nHcWqA;>+`qu\LdnHe=:a0V4$;ilfoBW,lPF%mQLLurPXAQlZTdue&EPUA)[>K6N]l]VE$j\S%?ot+EF&TM7l]noe".+Ohchk#4__Knsf"N$^Tk-<'*3^GmnE&s9;&qT+Wse)i[KC00$Du4$3r(cS_Qt7#35[=]BSaNK6m7^B%4H!_%5r9/M*MNq9+LTi$k@5%*8STu@4c%48ph+(ImOmb67Uco)k$6Nb?E/ih$Los>B0/?o>EO:m+<H23?;07]389!ogt`E]N/'UL/&uh/%\'>QA'ltY+E@j".,i_h9f0HriVb8$7oC?0OJ8^Ufd<@='j;[I((84K>AcYO@1;@'Lp>FOuiU&1GO0'r8ku]H6Hp5-U099Hq0Bh*D%=Wj9FBc#W$+%hgjf(@\Xq0i87W]^VLj`,/M'%^><3md]64B1W>f+Uf#O-;6a8-7Ld*jMu!(f@YAS5_Yg3Y*t;60[UV*UYAD>)5s-%[cQfG6gLf"95S+Hn1C1/B@;G]q)@N8rSZQ.l:9YlmF3j\Qq=;p^gAAuR5Q5F-)X!<mX?L*8l[/nMfZ;+GO^;'QUaoRH?EuQaOrkm%W!;&\+3tnF8n9[6P(/OI">p)o`VD.PX^BVr$pOkc07jAm&ag:Q@[b2?aVTiRclT]b7'sri"$LB'-ca"g$\:e6,Kd7"!s..TfFBL%%hn)L4D/>`TG`uGH.[u(L%d0)sjI[TsqI(Er^>iV(;i,T,mZ.@3'8R@:+,dPo;2m@L5M3OUJJVRV*YJ;Cp-=ggLi(F7!u5dE#o*ae%$_djZ2k[*4=N/8(Ph4=Z^6s"'JYM&81E!t-.m6gu]VOb"<fNVaamd*YXJT]g3ad1H5<^Sdm;hb1B3_2*jK_#.3Lk._Bta011i4c"%V3C>!cFCfCLKWP_Gj][@i&Nk>L>?+Vc*@3BYg_'0@Qh6:q65]mRN?:XM5ulV'W-m9VCTDlAt-dd3M3WP/(^f$\"'FS.uAN?HYh0\%[>(J&SBqm1]B*L2C@OZ##=l_8eIIEVR[L+#bMQj'L6%-r*kOf!rS;,P6Xg:4-7fD?15EgF;l<stS7Fo+gN)<$6lR01=n92R<<\TH%;,;P5]&#I;BN&t;36t:)G[;;q.\6@A@/rBGeP:r=jGbgd^&Fg<bejER-\8%@>T6pA#<!"laIWE2E`)r;-a"fs^kH/Z9I'q7`fVIE%<e/Cn5kms0[6pW1q>0=gThk(2UoNR70QNLk&;u/n^*+m9UH3f.^9Z=0JhA1Y8(]4lO?Pc"S.Rf-Z!r;8CtE<iiX4r\/1qMPa[90"%?E6J),S,GI`clO5X@2,'i\D=HH-SE.k:Hq07MlMHj,<0-4V19k\'<,?<S:u*V_fX0Zf#9nqp8gI9Ut4';)$f]B+3f2@)@#/V`J;\%gj_IbXe@EgVq"5sTE(M='G2A_LhbI%fFb@/*+E9)0EHg2OMF.CY\=A.oqd-dQ29_`:Apn3!&Sjq2I5Bl'5h/BflBYd)Ot1$Ype2?%BfJ&/,c"=O;I>LY`?ob`=]j2*b=MO#55=U=ZH<%Bms*MJ>[5:M"/+@mfk@AH10uju][3rj2L8$JkYAL839F9AM!>TPa1Z<5%t.-R%e>s1/m[r^:O"eqXYLA)_&HK1>6EHgCc5Dd`o%f(2!s69df=cRu_s-^e]GqX0J4&q%E)`r0k,"^hS;I:&oQ>5[#9bP7bJ,f]ZEln?%]uSLg0i`:?luXATq?j*7o[$+e/san9"B6Ct[0B$_=d&&8@e6:W`D3#r=#J?U=DL1cC%]V0&8M`2C-VE]*,Nj\Q^EM@7#uW6BV'!1%MkTN0$-=2H[h^4k5oXe[`r<g,5,DV`egBuV@j.#/j;;(ZUt?oM4qM"OVK#?kCT-,8\mW>Xi[5\'0#@4:/f8T5BDq91?(1;f7Luh]%^d87>E%E)*`Z.EcZFI\*T=_oU7tUJQ8VmlL)[$qI\:Q<Df.X?><_U=[?)@pLJL-+!C`a7lCr0"V!Mi:*Eub2O)&Efa7m9f^A0crG%=tc>-%lD^+8MN$K&eA>QHEHj]&7-cAk@HOAYt3Xk47ZgYq/EA.T\6U%S_@:<4D7^0<QKpti^)2q17F9d8&i4Um$8[U4m!uAX[#F%%1=?GR<AL;nq.NPpoL?!H:ZP7#9ZW#eG(uh"M(';s3#PkjOI21CfCFS_j5u7*8LSLL7R21fEP#jN8EB6WU_t<VG<P[D-7#I!`9$g>%U'o_p0HhV#A%<#op0f]=chPuuchbGE^:bd;_LSEK?A#_h<;-ate([IS#[?4_9oOPF19i$8=qtgEG])DKTaG5H,dDK4+#X[u06qOV%M]?YT$24g36:OVt.GK5QKQkg#m1qE%P[NJWYoW+2LcBk1pn]q)@&!R:Omr;;F$o,c<^h"O1/a23nf`a(g:lPdG37c$Zm!YLW*eV5%=S(34)'X\ZUP58^](D<5*NSc:`X[cdmQhGl$>;$J"Vfio<;16q34ciT7THF0\/RfaI05M4=%K&MIhIF0Me#0F-,'j#;Ba`E5'e$=%0[]PQ^6cknJO]2*BWHm\>1i!&0J`<R%Q9ks?_I_Njl1?0<Xkkbia23NTRX/'L:9])4MAPPSVu/C\jlf_/92X:O82m0GM_aE(*7#2%E#&nDJKs@h/0#$n[C*H!L'K60.^fk/R3cA%JQun'%I[_@9<@6X3'!:oKA'`^+3f#%NtM.OZOf.s5k<I1c_YVH4A<fX6K3QOpG#Fd%JUlV4a0WoeCkb`!/E^M>iHGe+:>B=_ZYlFeP)9[d;FPY%GPr0iNkTFQTG%f&>jh[Ojq^+Q,=fMK:+8:N\Ms]Ka^(:M(Xb*9OOKkN%^OEjG]^m)Z]3^l'SZ#l+0d[;G)HAc4a-6u#C?!&2StHNK3PaAp<]VIEe41@hn1@\#U"a%D<DeT$F@?J"Jt?,a>H?AlY4%Wuo@Sh*%\30C`HJ2>)"o*"2!c@$fLk"rXPa*$srl(i2TtCpoXWU[!:Uk5KGkKYB@`?ZFr/6V<7sP[N>j[+2^Hf=&>,W'f(Et1NJ>q2`.XoLk%h>.BWCbLF::jY9lTl_i13[C`FG%b69+q[Kdn5=d@>&F0-(0\8-_Q)@bhR-He:!PqMTc!-]2]Q54D#./*(]Npe0A>kBpi+(9pg?U=%GQ<jSI/g+Q.pn7p7f#n7n'ED+@tQr4QIH^P@PERi$*4HL#m"N)!"S%!4l\2brF;Ju;k6g1bM[n0,\6PJUT8L%Y#[csGN5as^pcdO%%OV_1qt6kbQhO".GCSFqP(O!.W2o(Bl)X:Am-h(lq:[L*XAl$g>iatcGI:J0kH!*tDuB2:>f?5]9rdu0YPHF9]LT5S?H@f^3R/+p%i0U9I1a'=&\r:8MkMLMf_7JTHm,dTO.ZDr"<+3OgIWq-fgLpZlemVt/248ktTfk>^PTRuJq;Lb"X4X5TjfDoC_04obr8SgrdeE]q%bAupe]sZ.)MO/<G@5F7Hh;s.U?V%]gQ@*cPAXr3@/R@C!^3'n@==WaQg3\ATe$fN^WQAR;m'X9+p!40:r;L\acX(KR:2`o]*Sr;I%05l<dp+f`E-i`UaJ!H'$d2MWC^UH[Te!+!62KcI:I6*ph4?hGJ^OMWQN385mei/NHg#:f8]p$S!Voc^:)b4gB%jm)'lrpj+rq+Lu%AlES@hB)&YZ5&6tojC:E8*0HGr<''e)t2MX+!5m:I<0Vm?2i$LrgLX.I;fj;$f<!W/mQ*_n]&H:O2&+2.j+IJl1]D^Kr_-'Sh@*,%g=]S1bo[fc1Y"Ji'^q%0fqVoTK3rPurdO=7IW"c&Qeh2m2X^UIY8mT;_tO\rfraDQNT]>K8&)X-n"0INCQ9d+mbM-_q%e>>B[.UC%n=7$pJdu(3H-c5BYX>Y$Yk%Cd]AE>G3t"]^]9g=J+5j?g$U2QonQu7Ue\^nVo[^nEiBMfr\GC@W?O^]GDlpkaL^h?P%6q$WIIHUc%KAWnRq0)@&8M*IK)cifSr\j)F4a\2%@JWFt:$5-Xl!R.fOnHh?GK/:``[\J6(6Im,59JdK9(/(qd$MGs&.$!A>e;/4n,6/da\PsG%D@,Ra3$LcHf<)/;&E:af^U?g_f$T\0j$74FV7qhZIK//=aB"pac[<C=^U5DDmiLZ=m9K=DnR1dKcO:lDo1a\jZ3!8M!1"@[jA.[8%omWLaVp\P9ClOR6a0\XNEu;=#6-;>]mZ:W0?4P!qIP-\JGnfeljpLKmq^LiRl+A+!41CVP?7iq(o:`biQrf6`RLg0MG>0L`'kS1e%j7ZYKhe;Q'2*T1s-N\e4o:^VX]`-CViH&g0k4X]`YP@EVB)1i>^3"H]fatXPnpRjPU'8!KLC`9Ydg40Y!]QG0fC#K-=7K>t-@EuV%cC]Mb]!9poA3]LCj.k#_-h#d:Arhomg:fIlhjH(d[h)<<4b:'A?t!XB]:T_\rc5d,s,Ah/]Dl'"EMm"Jj%^&.^9Q"&r<l*A=*[7B%_:$Xs0mOKu+@cOZDnfY(8WhQ4pD"\&5?YhH>2.r&O(f`B^N/]k%ao@f0W5%<J29&^61ch#0`%]s^4kCCQUC)XomCF7[r,LeP99A2%DWP"%^-!CU_pJ-:f/A)fEKjrdOI'l,IMW3a3ZRO:+HL]Bi>(&'f)+d,H38@NK\DtA7)q33'6'E-`VX"E*A65t"l#F!F',sNV_?qO%2nDKZ=(0SQP]u-E2@lRXJqu#&QY*8U8P]@T0mDaYfKE>$aS-G\2bm+c*aOWS#Omi%NR^O$Q#Mic4s=?%_":b%c,/K-b8[26m6>n(%i$l.e+r,&7D%XHF7#_^$1(<1#PkJBfLPH4W$gX]u5Q=B\?V]2G+!:=hou<!KGsm=NV/uPN]QVK56*j\/m'qB%qS>&u,Su!8",(TK%E..TLa!gDTG63OpJ%o\OC4b[l7Z1?^Istt\\"]qt4:*OgP9V>)07ES()D[%B*7<B"lGk![IljRB$r5d3cLql8o^1[/0O29of)--f%LVE#c*-,k.iFi\7h0J7fccTU$?p<O:Qel!(rloXbmQObe0C?Pa->1/q3"*t-Ips1$kqE&TB7dT?c@h8'Z"1`G2Is[i`>]3"9,>%F%O9K%:a,gHYNa7p=HtF^QGO=FaAAXVN:(;WYW`d+J`@TpkM6d2s)kP3*RrbS-V[FX](>S8q5L*1<^:X)Lc5$6MnjECk#o:Y+nYJIA%8LBBtc`@@*[J3dCnQHOd@U,%)"f'%fME`F\InRaG_<g3&:BA.]E./P9QbS\u&YEqOp]VF5JS3-?_MrckQ<$ljHEHb%.di6ss1THB%(Q35Kmd&YQG&8g1Wa:t-oAQ<Cn`p#L9GQ_e!;"6L5:h4Wl_^lDHr>Oa@6UFf5)]>=2V_Ggop1i"F-[$SUK>`L_eAQR<]hm55?Ac8%2gu/Bm#,T*`!Ti$<2D:h^8+ZcB]ct8P2#t$`UTMsZW[+'OLKO]ZTn]#9D9O`%_ZHHc'9(mp0SE0+':*NkIj*;^^&U#^W1_+Q``m)%@bg"6V1>Lelr+dCs4-m,ja218hLFup6QQ&u_RY/Dm6"ZD>fZ[j*aJ\nmAo#eY^.sh3qd-U#+T?Yc>*O6Z+^rk?7gV3MgoeQ7)^$4%jR]EsHb!J]\qgcQ_W.h7nSbHirT8FOLl;Qbb(;i)X*Y?Qb1gQP*24+`?a/^4hAlig,CfN\_g-GGYk5\Tcf)Mu%fRnaZ0-*!S3%5=%bEqZXS9N#)h?s2!?@bd;_tSl%?_(JT:[L;e^0#JpNM"p[8F8aZHN(nO6X3@P6I=T-7IEO=Fs6Lii>8p5OkPL+aVMgKm6d[m+lHY^%s2dHXYJ%0rnG;S3?G+fB>$U^@e&hO[(`:EI[jUY=&%?`^R[f=oN;ho;&,]_B=^dcCPbh0?J8W%</Ko%5/8&1BUW(i#lR2:`rO;Cs%UVkoO^TqVTm6'*K[^hN+bD>o#kImH=H#*!&T%fHp@=R=F\+'&=cdr&E4+I*^Y93XKO%4J]ZN]i2B@d7?I1TorL3EReM')YV5<SRN%k-@M1MjJ^t#AU_<`\ukgb_itORkd&B'rHR)SDM\9RfhE2o(UVMs(6@Fq`'\:hVC:uKA@O"eaZCCCA2,AH+5g/[ng3=4ImRbr$;>R%Q^?F:$'$*SVnkcbRG<h=3rcO&RVY#7Rl:+3jD!PBNXeQ@=%ClK[6$m6n+I:d&)TV)SU\F\-Lr*sAoCX[9?Z#6o5r"3du2(nK;QN@%TgW%We,J<+4rtu#FW/Ft8+/oK::Zn_O"fbrb_eN07(-@A,A,ffN=i\Hd^I.8bDWX5(*H*cPbf35L4F#D<)ng0["*1\UB+q/NZ2#(%Z/X2j=V%dIAm>pE'Wegj_HKcU!<iZo"]dl"arA^n*#0qZj=FbtEnhG\OJ-*45\C1TXj@X+=g:_;;#n_8AabT"=^t-;C"-eb#t?`$%LlFlEN&`^jN>U@3LpGP1p<7*AY'ZiHZa=,dKL:0sq7+9]m;k\@>:W%AedIUD?Y#sd3-(d/930g-?lc&/Ss1%kQE>:HbsKM1=t=>.%>MJ0L*N7Ol&`U*:\Z!bM#LT#5$Hn^/1o@TAWGF]3Q$V`k9.2=BjBN"B?;'OO1*8S+W@klhTn\lao9\IFk9k\#5u%HkWl8UX[7OXt%Anf]U[9)(>9!PO^-3Eg;RntE^Fm)iTIOa[e>c#F,Ipp6:,o7nLPZljK*8>%sUPar`HN]FG<Gfim+[]+_3=8VfkH),<d0@!94inRU%9!qc:\VCh6.sY`A0t5KG>"CAI0bE>ZjFsgp3bqOnakHSbh,=.:OBELp2$O5!.4AOb8=shIA/97I;H/WcQ$nZR'NS/=%"$lfQ+i"t%_hc3SC$^3lLA!T/#AS+\DMZX?$;hbb>:KsAaJIa\eo<5*ETi$@D,!?^=R1ZCX^PFi`O8[]`rBM]>o(fhMJ[6%WfbMBfj<F!P]b,H%E:2GM%3Df3R_:V_I9Kf<Lg\uCD([$(hGgM\okgbtOk\7PD.,PRWTmY`k7MTg8?Sec>2LR"[LThs,Af<D;\9$lC9+<Y-`Zh1[U@QF%eBl6?"-5(EXogWJWaJ)F1`sgg\#j)F!j+)^Q<T!,b#VEY_![\e8%A>IUQcD"5&;!74liQ9!k&7udO0SWWoX^\(plrAereN)6e!>`%bE`i?+I6ke%Hf]lpi->$M.Kog*+]_>`Bc_*Sb2@nP=&qClG&a)V%HoRE*C?00&;4&hRX%+[F<l_)Qd+-$s(XFk+Tp=K8Zf^$Pq]A%EbqSs\J0k9pGH2L-(ERtYV)/<M*lWjI2p<bOJ1*R.>RP8('5.[k^XoMERkXO,G>2R6FG[?WKM["__ng,UpEG>7tO'RL2Se_B>o$0%"^Ae_GqF2?ChKAmFeII"5RGik:`IQr1F0$][A@Kb,tD:nPtu2Ij4R"nF=j)#>4$T_;^Q>n=eno!;gA"*[?5;q]07KUf@Z1%4`]%(%qHaHi$*D-dOFWW!&gY7$;W2H@@)Ej9KLfup"t34eTF<9'6*u^m).Z+T8h+=k)[>!BYp6&MA1L]$-R]DW9=A;@O!/V00$!-?7WVnE%@V&9%`>h>PO=h>:],[Pte3^l76m1AQ#+K+/T`@r$FQ.[2_7&!i[d(CR?qprL;m\EXXXJ^lW*T^Eo<UX1(/kSWBg_iQ'K1VddRIds%F=D!4F]`";*f:lU)V?AU1!khT7tC_.0#U(d\<lE@Rp_u,RL6__PmU'T6CN*lQ,?-F_'fY5p,Q4[WjVIE-Z]S6H=;JWWIg56"=cY0%,Foj\$Sr*%.999;$gcNE>s2eF$9",EcA)[Ae/`R4BRf@G@mW]hG1=MD&#gHX@;(SA@VQScr=I_]C[olYAX,Vh$CpIYA$[@_*B`t6%"R:.^UE![^TN^q@7Q;kH5+"iJ;!i>R@BAK]SFo4X_0P3t:i0-MjtMQ#C0Xo*g-,c-+LUj;<e<17U"YfaYqS#_0uL@)[ItHk&?]:B%]nacW["8Rj(N/qFB!ACj<p*s!1mf>:BHWitNoJSaTB3#X?o*VAnH1+rW3T&L+tIXY#ZD*`nsZ[;fF&7ucp"19'4\&!q?T=a0k$)b%J-+(qS7Mei60#QJ`<'nQcX7t2)iTd%8ONOr<9c#L+L78g!-<Hcfcds=&R7]Lco!245_ZM8,TODVjB=IJcOm9=\X&gd92#=/<*MqT%cQ&4iKU,@"F4=&\B\Nrci*,1fTLm##!dP17>3ZYMJO$:&P+,:#b1pR2Q0&28W3,1$J`N\*D&$dNOP;P=f&C/!BHu9is30oQ\]juo%Jo'b9M_O$>$X+VDSMo">OFUqFil]qR)0E5c()8aF4p,RCV6i(X1O,!IV)UgYZHhBJXUS6QaO(F12"Z`)Q5W!i'foJjAI]`mQ\NcO%F-L+,!A&bt;$m1D!tDN:.MO#*n<Z&RL=i>Wd!t-pX:/TErGuL_:]pfjB#V."Tegd\8Qc:3.nVls1mF*l/rs.=b&9qZE@\r;S@[9P%VJs'3B5p5^jre-&RO=[d]P)O%e"UQ*MOW"H(HV%dVRre%k4or31^o"^NehH8!e8\3]jfH(.UfA59IDQS_aI\b[(,</dl.W],tD'Q%8QA=g;H+Rs,s;s4+PgF=jp>(KOdggs3O(r4SBG=:-ZcMNVi*N%K;fO^._R,%Jc8M+XPrsiqT@qf\tl]EhO9Up"WW6+28G^eP>t*$%Tpk+66mFQKfX%rXAoi5EL']7kR?M#VV^RjcU%k)]SN>YYi\aUql5!;Xs(Vo=/Z$is9M5+>39]pI9[o:L9:pA.Qk6WfUkcBIb\mf#%>qIQR$L>P+BNY^C8708S)BqOkmo(Bd''E)]JDiCJiEHlU),YcV6ETCTYJm$o"I9'!Jn^pOBK=aBku$8g+Y>$d`,)ApR>-pT\uZ<N%G_*do8Wtn;.l*.Ik:kLH1+"T\DE<\m/;u!^NKk@1/[hn3aWM!r=NS,7:eQM$W!cXZQk=I?U6:g3T^)##N1*j#`_mq5ELN"e)5P.u%NLF!K$D$fH/L2fDeoJ3!]OJqSeW62-&;@m!biM_4<J*X`)J8%i-mJZE^mGCWH-$+0iFgH]huKKh@(_ZMfE=6&Msce*0GoRuV$'km%VkZB/kb0]S-u!t[$CC4YC"KN"<u5ep4oH>ST)Ds@l_>&1c1^lXce(-,*9O&r*Eaq-[\P;lg=9XoPSDTHMB$#u,ah9\\Pa`q<#e>^%Vc&\7]P/dgRUiGegm!K,)5eN^8WmVaUWL&/;:7c`D32]nN)sR\W?dm(SY$HR`AAY=_p]aE"C>p\.8;S*Lbi:69J`4Jf-F:3)]jeA%+d>EsZAc,Y@tYJq:0-CYPE>'keZ_:P<uOXd=Va>+;Njd+6<;QR`_@h]29Ag%`ta>m6DVu0U69&%e]Dc)1:<,u>Z+72W_TCQ[#j$#%#dtno9Bp,BUe.GP:6o[YWO</[_h>CacSSUjLULe^D(CLTdmte\RAZ=Qe!Mu6<:6lUf]g"q#C$18X)R7i^]&sc4&l'qb"R/Eb*n5f%<aVZ.l6;LY(TAr_7D<$[kGuU*EO'YQk+I3k7b_QI"*/7N0aC1oZB>F9aZua()Aj_?3%0Re%S6m8%&C]F8d;kua-".OcK>Ig&#k,=%M*U)W,"e/Ci1R<S#"Uf7-uGa['7iX3239+)3&&>V##5B6&%(<SO9d\'Zmr0A^eo2G8<SOA\g=0:^u==V4s(FMXXlNeb?ik@n-oe+%^MG"s#BJWL)ihbniD%('3"Dtj9a?\&.N:t_Rd$,tV?7(CA2Sn$&Y6dZclhSg;0>N&dt+:^P`R-mSK`/0U?S!U"R7,eG"RQ8[?<Bf%3)$f?1`\Q''\166ic"K%2NO<9mF5L'h17-AF$6![Gd,url\BRr_D(345'=C)D[(Z#^3\d*b9J$C_Oq.#+nR$0;sR=n@Ed*j(n*Vj%Y&X\,07!rXjrH3'Oj#=O7EOZ8$q2')&f$cTKBY2e1(7,d`?Z7`>_b^'ks-gNoh3lSH5or8opf(?!hC.fPh^B&9ohsUMLjVb?,(XK%;&OI);D!Q5j$:TnI2+Xpa`L(^meFccLr&a$>b;&K4T_1@6%WBBQX82_cXC+nj&fU]4E#NS9qS+r,&5k#Ub\!%OGN6QMjROe`$e4_%WbK%.QaXqBq[BWaSYfpc0"^2Ml/nBDR_H5Z./jIX"d<%Tq=:N*7Eu[+Mju@5(HG\J/onBsI"&MC7L085cU>,iWF_unf1K4SfD*/2%&0?LukqY't#*'3ffC6RdM%;uaiIO_PnA+Z-*CSb+)9dU3_ZNgt3XEhr,hF>6G[P9B%UrPjAI-+<1iRPE\crB_2]Zqf-VJPhH3b#)%T[A<-U>Wfk;K-"n`s.Y`&]o,d&fd8W@Y6AE/qY)sE,]3r`We/ulB!k[LpY))VMEM@$r*(^)),H7?n-p9-;eU;<ktD[c(`S#UnT@c%Tn00d1'iO"1=uU0LBaVkA.We7+_tU"e'=O[B,eS2U-j!uT*FG^>RrVs90X/\`gG`P:j@i<Q-C1C,Y<b(P#+m>*Q]#Ho$2>f7KSGm%`Mj!9B$B`N#f?C2EP>k(Jk]`KN]RqLcF0RB+PG*RTbQRcVIH#e-8DQmMA[kALpIP]8jL4O)*YlGp%)Hb9?qn=CA=d\1rf0ecq3EF%),MSM-^U!XYCq2MP>#@ZhE;0W,bS7;S4Z%]`XJJi+D_C*a[9-[l3*TrR%1X9GNm2W'GMfsC(s7<*k,B.5r+!o3Q)NR83i<53gG6F%N#=e[_'5+k.sY9N_?uYGF"7EXJg*c=jqJL:-:fI;I5rgFOapn4E@M".--q@gaujcjYZm*h-kC`*^pJ<$>KYMBUlpI.OsZmL*sKb#%VS-1f,6:5ri`#u:3]rVTTg\'bL7JS(:n;(E#]&MjTue>.Q@`R;3n0IKN7\n;VD(#c'Ub8;,"Zc(!TgTXPU!D`XNoGWW/^1U9OARX%>B)h-"j)@R3=1te2O-sEqJ'1f,6:5ri`#ubZ1CqEi!^TLG[MIK$cStT<lo>=;`JMg.4CLXdrJ%$8:M=FVD("4(R^S>JttGmJF_(G%)*ZaY`uXH2SZc1e@+,tApD<ehRqt_`6'@;KV'("O,&b&U8PG-t"uB.R,fre-TO>bJT0QeX-#Y%^"e.uK^&Vi*'MJRc-+TCAOO\ph%Oss(G2jfn]JttGmJ;U;dq%t]rpW0$<Cr9kYfJLIH]SKui9+<?S7?Ws3jsM<&OXQAd@?ouXR[/IJ8T?3\'d;'E5*$5PJAleL`6lY4%_2N\T*SZm1@S&W+T7hf55r+.nVno_CeB'Uh.KRN6o*\cA-sE1.]G,0#@iAjY'MJi@P5N0u&o*&o.[e)R;,=S$%\[!&S4Z%hloaH%%(uZ>[Go9(=&Jj4)Q\%dpOX(`a$ISrW,alHblh>-`!fA8RW<<opnDFTiF2J7oCr6b17>%mra`,Q#ILa!<,SVLsHC68ikl<8t9OY'c%Y*tK',"Zc(!Q?9G7gJbH/?sjhD]A[TC`6g;c,*ULYUp/MOu2,l5^8lg$UuDjR)V!<,7+NFFt*M]B$B`N"@>Udd.^01,\S)^NV738%(J>)BJlTXY%h\/d\mbt:qmBg3!XaP=bn(HpAuHbM^miQY6_>k=J-&FiW0Yp!VW,[bJg*L\$Rl55EE=[laU;I<<=)2"eXI^+(;P%t%oGSO9PNHoZ<j@:R(61`?.YU?>:-^:2dp$3/Um@/L@RI)V2nsqN#q-E#Dh^e#b.6MZJ<Tb-cF%1)6dln#MH*;HUnAjOV)h$B5e<eT%:pC][0*hdr;NM6C2a]tbR%a?\=4:CHR6,_GVD2&NK,c%tO:!l[D%_Z.R,XcpV')ZGM?t`1Lb]@O)'Wh3%+Q$RUi&,F39[/)#"\4S%BWO1\J:_1J4qEcJC0qNF5WTPa-6s]K<,[MI$[%s-Dh2!UC\Co:O.g7rBmaZk-rQ-6[Toh"Ur7N+&PGD.S(***'Ek73#DcP;6hM9X%i#FiSm&e,a0$lG0[+"Zp!!`Kq-j\6?F:#mH;7RrO/-X.RZGD2.Uk7UN&5`gI,C+.\>)cNG!4%4q?kh&@M;cu$1+NC)TY0id68Y,6%YlkarZl3Pg6:"G\)'VqZC,mBobqnu0hLT)?.lC9LWEAY1%/ZQFJfpCp!bp;e88JQ7I6Cq383eXA]GVoYq@)XDFqh(T>k7B=TkOph%4'ihA0e#N0$<i$S+Jr!0==Sl(F\X!MJr1tOd$#WIc_$nS_Ar;Wps,'&--.o0jD@8/Q&0l-,!i5>Dhgm.]h=G*,19`5dt``OW>@q?%BtkrqJ`*#Q<49$1%[qEpg]<N\#J<0S(*sNWi`ee`80O`2PtE0F7>X,iJHRDN`;u-WnH\8)XH7H[S84'W'nOulj:WQWr?2eHE@E4G%-b6EY6U][ag+u,r9"c&c74;6ocGEZWW*F>ga=&g'&:"N4dT09Z;(:A/8g1=t^.S'\E&!,1I>Gg>il)J.6b/Y?0uL74/0[fCUQm$_%9Zs,27iR4S,ZV-_6c<tT$rTG\0*G1"L58I$(IQ,Sb_7Q,&8Pfm"W!551)^IT%&;_b-1Z27W0H=?*$VMDHrMSHBNUIr-]fGsV)U`/%0W("[T7DiJobNtH-o)6&\Eh-PbeF8n8X9/M5,,/OV1sf7::4_j\1!-$\kF;FHZb&t/+(lPXN='r;af3enE!XCXH0;ZRBpNnUm+oV%;F@8->a2,sOWYrV$kXH4X/hMDbI,Po':4Iug?Y(p4mO=YW`7=@80b[K;LKh%EJgAP6m=)Q@Yg8B>YDtS5fUlQ;9o+]O*DMXqtp/&%\1F"4@O^TO;M^9>K@CHpTl@5KL]f0%dB&C^YqbGhXHGVLjf4g9Sg#rgJ@k0d`]b$2*.'S3)Q@F#2*_MZ#=tIN7"UYL0gr$<L\[/K%N(#_g<1I`XXRZK^Dq_6OpCg)Zi_iGmZD&&/#)LAY(]!;_,a'oDqWoG8XU90n85dU<e^:7YLEJWuJ1HNJ-Ae[#mI^4&6mKE<%1o9Z%#C6.W#u^'-&;eC>[G_ui-08;lem1jm.&'Y"]'dm7'F@[>cE-k5,It!U"2npb02EZ6Od()F7&j(d2>_<OoYWQL)C*]:OeYNna!OtH%6r^1+3cj^6V=^''2+7'd6%/S@;(;0ILmZO"2hkCn$L*>Z76(9WA/Z#[pPSh;&rp.N80l/Y(CA#PDlHW%7.*MOp'd'+-!h"B,4rcI%X^#+dRoVCdh,>S(kZ=uW6U[bSVk3RD;JMXm%1tU?&tV9T<(ah@+u[s0QMiJ=P\\IQ`lKu'1n(nDq["N=E@E5r;K?-@L5=\hW_X]\%5t\d,+uYZ9cQ;Q[)_0I*F,c;rK]mPhH(c#H&Wr7Bdh52_\5fM-!n#1jjlm(>Ust;GU/.DTDH^>LfiPB`a(1-&,G\;bBO*ZQ"=`#l%(a*t(T!;5rOf`/BH323`*,=aoL$6uuW11::f3tn>1c[2eJB6!1E&.l)1dk<COI`9m;K5D=;F<j\:W(Y:Le=W_6c<[ZG'rs/p@VCf%"m9&6ZWoq6R@3)p5\SOFM58#6@NU^MFc[LcHGcE01IQhZGVMV'>hp.#\"<3$amgjU+Obl)I<(A"-5/q3ic.Ep0g*#R;F<iVLY=OP%<(ah@,.W`'5W<,:SC2rZ2Pd@9!t>:ZbPb,R2@Yd>N&R/&:a62nK&?WLH@;ks0LRs2i_0DO'5"27:.d@Zl'D!$_,Q!HIQTUC6tQmj%+NC>L;c&UW>p>YfoKlK]+G&Tn?I@`$+V[V;TmAi7JZXNoL;R5t$.(M\oVu+TYb*jG,SFnFL]g]!3M@R_J7SO4=>3,e0l\N@W<k@[%O!)*J/l'kfPsWq*dbB!e/T@PJ+NCnI-D=%la99<^UfVN8"[aPkWA=iO9phW#"Kdf]VKbQBZjARK+IQlZECVi9JOEsPX=;64.F93)%J93oK((?<r9Un[>C;Od4B/SX71+?p-HO'sQ,=inZdagbm$"Bam-Oq;4ZnOm%"j+PP/P%!M9Un[>_$%:&\)7A&\[Lac(@2a(#0?&J%Zt7?k%?O\N((?Cgd:T;.#tS).Jl+l\&eemj:`d%/P&mAIf>YNXd\^q`"\=r(iF4r*CPW+uMMj=m<Ve&/$DnrH=iqL*O<>mq,bQo=%9aoP#1%ST'F@FY-Kr,HXq-;;u/;6K$%3(F[>&AF43.u%[[TtF$,-dLpPCVqs:%K`Zi,1l(\mbPSCaq_3nFOP@12D[KZ.eba&OWKG%e1M>,5u(]r$PGuBk7p%AJ:\*6O^*t6>(&gBlp>Q+*h,b4d*ZIMAMHS^0eV#kA:fR\R"0:sWC@=/'B^)jPCW5VBmqop%j;<fW\aaF%7Z[g&H9X3B">P2R1BiK2U4N\"g^u.S$kX<='fhJ.ifM-_0pU.BXJ'3X1)`Y3UuO+SaXE!6@f1Cf$4;D4'hgkRr_a,Y80fP-,bTBM%eo4BO>2s_B=X_WRK!]R+>S[VkLp^Kh$-;6I8jtE;l(W]1O?eDb30SlE#r>OVI/4T]I!gp\kmIRoOr#14D37sg,SK-H9gSW-64b,'%:0r*?$\h2'-I*m0kj8W>)"@AJELKp('UhLQ/>#75L4Ne@;)*@l1Bj&SfVO0KaJt/75m#0g]L$6D:bZ=4l4J]q)c0$/G+ggFV@b*L%%.AtG=U?>dj0s52:aLNa&55?p[iR(;,*A6PPCQp%aLW1n]7M[k)UgbiFItoDhfm!,h!+LM`o2^+E%M9#-7JDJ&870A>N9,MNK\TC%G:T;l/+IXt^50_c"Vl&j1)s>M,os]%T"g<8aERM4-2I/1FR^Cl%AtK-$W?T:(TV`'lYr5e)kUR'Nf9o.QX&Z\E.tO5?Su32DX&#+%@OHAh!Z,r=@Ia7Ir@[W9.]I.?M^U1VCACU<^?=@qrQ9N8]le.8bP,Z@72gR$]sX*_bHp:\COFOCO_`hLVL,sD7..V;Y>rt5pSJL.%]L!S+OlhSi$b<tmn'@;h_>1*XrKn:)Fe=j;lJV,Cnic_n"$9k4:KOdl7JD&c2.%#X)u%9B=1,L-q6QTSnjOpHQg[PEMsgC.8sU46%XnR'`.&0uUkr52:@FWGV,\2'n[($GR23>;MM/I\oF0pf-8if2T'Y[:sWi"QqT?H'cHr[j.jX]e@]&TA7]U(_5p!.p[<gd3=0/prC%^%ZR!%c;V?LcF4;:KQl2V>##r5$`N=GOf6Bn9$%Hntl),8NYaTD_6GP!*b\Q]4Uh]F8AWChf=c*EJR0QMEcF/\(la7cI"NDFD3gD%F3duJQ(.43/3B\"=39(>k6:6M:r;4h![gV>U`\H8NuqE<C[Q!9aq*9I?aEM?j1]CW60lEs!P?SNj'GZtjhB\+5d%Y9ocebYM?G:$%)\TNZbMT$Z3t-Us6>i<k/+2@Z1JZtC0aha`FN(qWVT(R#a5@!UH`pel`!aX%?_@2p]Oi7i:$,r/h8"a5n0<]A6i/<K?F5uH"af'H%(YK=%Oo:EYPN`-(Nu?g\k^0$/S:lX'jaS5I(\L9iB&;gq6?8CkhKP*aD'%!/V=hNs2j<UMFOsHs4!40oHeD3,n"XfL0>;n$eke<>%95R;YQ*+t"G,J,rp>JC#YBq`@m2fopVpiaZp@r1urVdsS?>WT$hqFXGZb(S]oBa2X;DZl2j4g%&[n99/'7bT2A?q[B&TPOSo&C"c%F#bi3*W#BkjC<@Gqi55:T-q+/Ni$IQhjDV8Ds,e`G/9`Gps.:D,l;k-1@oe1f%f,[>g(^LTAJ8VCs%aZ>N#(jL"Y1tDni88hQ$U^%Y]+kMq%*BJ^D>b"s5&@%83CSWE.>U:48$AO-i<qhJeOd!=eD`40q,Eg\@4]i3FL0BmCHF7f!`-XMU#01q7&:BHp@Y(-+/2BZHJl5%msgKaOE+7/E^igZ45#%30_#S+qsQbn_1AREmHsi8AGD8`O5Kl?4a@8S\mIZa3m=VD>6<@Pl234'p[uisA8C`gnVm&rW;I;kIiV;h%`h(fLVt6+IO-?`iT<!&5q9Qs6hl_J'\oRK+V7*qHG\0+fa#r%/bP()4bg6*Dn:WTIeX(b9?`&:;ldpTuqWVAD"OMe9HbWJ(?rs_L%SNWO:40q^>H>LXNUY02(4$EVZh;Ob*Z$CSA3nG;K^M3)k<mFulbI8DPg%mH$jo=*2F*'Hp9+E&)EXjl/rn5sF_,$(RJ,."nrl6)u%?[J3SGaW2kTO<*\`L)9T5JhO%98H94\FaZ\7aTMR@FL8Aedps@ldPggg&Bt-8!Eb(UV4aZhS"oH?DD`aIW`!]rlNRPnM:!Oo-A1h%g<QIqB:Bjerr'%FNRu/8jm5$3PeZqYSebH@1,s8jY\iK:79e4eb;F]+>R0l;;TP"E>gnY(%3MgAn6r\UDh]s*SFJ#c]/hW>&ni1N%,$DFGVNFG@"eFcHliX&KdhkA%"mNEkC-i8*61JQC1uYOVhmhb=IrTUHEKO>3?KBA5(O:#d7GcdFOk7$Jj>S,4ne2NMqXKW)]]So3%F^:eOp@FT@'c1m\dg5/ngMHK>pul7[h**k_gme->c0%S%e18Efl:f3iNfJs3.3IaJcS?>Zio<\?FSke.gUF'cgILkk\W0fc>f/U$%+c[pq\84@J#\1_>f\!bu>$Tr9?f+$%gY2UAEjE8;>$QH\qgS+bafZ^sT8_XQG5lKDm2d=#<KgogakiX`Aj-_Qg$HW(T7D.u@:*9P%qtT%3rrKorj.$~>%AI9_PrivateDataEnd